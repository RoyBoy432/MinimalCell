# Use position = position_dodge()
NSEp <- ggplot(NSESNM, aes(x = mut, y = prop)) +
geom_bar(
aes(color = strain, fill = strain),
stat = "identity", position = position_dodge(0.5),
width = 0.3
) +
scale_color_manual(values = c("blue", "red"))+
scale_fill_manual(values = c("blue", "red")) +
geom_text(aes(label = prop2, group = strain), position = position_dodge(0.5), vjust = -0.3, size = 5.5)+
labs(x="\nMutation type",y="Proportion\n") +
theme(axis.text.x = element_text(angle=-45, vjust=0,hjust=0.2, size =26))+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),panel.background = element_blank(),panel.border = element_rect(color = "black", fill = NA, size = 3.5), axis.line = element_line(colour = "black")) +
theme(legend.key=element_blank(),legend.key.size = unit(2, "lines"),axis.text=element_text(size=34),axis.title=element_text(size=36),legend.text=element_text(size=22),legend.title = element_text(size=34), axis.line.x.bottom = element_blank(), axis.line.y.left = element_blank(), axis.ticks.y = element_line(color = "black", size = 3.5), axis.ticks.length = unit(.3, "cm"), axis.ticks.x = element_blank())
NSEp
ggplot(MAmutp, aes(x = mut, y = prop)) +
geom_bar(
aes(color = strain, fill = strain),
stat = "identity", position = position_stack()
) +
scale_color_manual(values = c("blue", "red"))+
scale_fill_manual(values = c("blue", "red"))
# Proportions of different mutation types from MA. We will probably remove the "Over 100 bp" category (from the data file); just havent gotten to it yet
muttypep <- ggplot(MAmutp, aes(x = mut, y = prop)) +
geom_bar(
aes(color = strain, fill = strain),
stat = "identity", position = position_dodge(0.5),
width = 0.35
) +
scale_color_manual(values = c("blue", "red"))+
scale_fill_manual(values = c("blue", "red")) +
geom_text(aes(label = prop2, group = strain), position = position_dodge(0.5), vjust = -0.3, size = 5.5)+
labs(x="\nMutation type",y="Proportion\n") +
theme(axis.text.x = element_text(angle=-45, vjust=0,hjust=0.2, size =26))+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),panel.background = element_blank(),panel.border = element_rect(color = "black", fill = NA, size = 3.5), axis.line = element_line(colour = "black")) +
theme(legend.key=element_blank(),legend.key.size = unit(2, "lines"),axis.text=element_text(size=34),axis.title=element_text(size=36),legend.text=element_text(size=22),legend.title = element_text(size=34), axis.line.x.bottom = element_blank(), axis.line.y.left = element_blank(), axis.ticks.y = element_line(color = "black", size = 3.5), axis.ticks.length = unit(.3, "cm"), axis.ticks.x = element_blank())
muttypep
#Now do two strip charts, comparing the mutation rate, view thru the per nt lens
mycols<-c('blue','red')
pernt <- ggplot(MAALL, aes(x=strain, y=per_nt_per_gen)) +
geom_jitter(
aes(shape = strain, color = strain), #I cut out the "shape = Evolution, " part of the aes so that all shapes would be the same shape
position = position_jitterdodge(jitter.width = .9, dodge.width = .2),
size = 1, stroke = 2.3) +
scale_shape_manual(values = c(15,15)) +#12 is a square with a vertical cross inside it
stat_summary(
aes(color = strain),
fun.data = "mean_se", fun.args = list(mult = (2)), #mean_sdl add +/- standard deviation; mult=1 means that it is SD*1 that is drawn.  Mean_se draws the standard error of the mean
geom = "pointrange", size = 1.5, shape=95,
position = position_dodge(0.2),
show.legend = FALSE
) +
scale_color_manual(values = mycols) +
labs(x="\nStrain",y="muts/nt/gen\n") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),panel.background = element_blank(), axis.line = element_line(colour = "black")) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),panel.background = element_blank(), panel.border = element_rect(color = "black", fill = NA, size = 3.5), axis.line = element_line(colour = "black")) +
theme(legend.position = "none",legend.key=element_blank(),axis.text=element_text(size=34),axis.title=element_text(size=36),legend.text=element_text(size=22),legend.title = element_text(size=34), axis.line = element_line(colour = "black"), axis.line.x = element_blank(), axis.line.y = element_blank(), axis.ticks.y = element_line(color = "black", size = 3.5), axis.ticks.length = unit (.3, "cm"), axis.ticks.x = element_blank())
pernt
#Now do two strip charts, comparing the mutation rate, view thru the per CDS lens
mycols<-c('blue','red')
perCDS <- ggplot(MAALL, aes(x=strain, y=per_CDS_per_gen)) +
geom_jitter(
aes(shape = strain, color = strain), #I cut out the "shape = Evolution, " part of the aes so that all shapes would be the same shape
position = position_jitterdodge(jitter.width = .9, dodge.width = .2),
size = 1, stroke = 2.3) +
scale_shape_manual(values = c(15,15)) +#12 is a square with a vertical cross inside it
stat_summary(
aes(color = strain),
fun.data = "mean_se", fun.args = list(mult = (2)), #mean_sdl add +/- standard deviation; mult=1 means that it is SD*1 that is drawn.  Mean_se draws the standard error of the mean
geom = "pointrange", size = 1.5, shape=95,
position = position_dodge(0.2),
show.legend = FALSE
) +
scale_color_manual(values = mycols) +
labs(x="\nStrain",y="muts/CDS/gen\n") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),panel.background = element_blank(), axis.line = element_line(colour = "black")) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),panel.background = element_blank(), panel.border = element_rect(color = "black", fill = NA, size = 3.5), axis.line = element_line(colour = "black")) +
theme(legend.position = "none",legend.key=element_blank(),axis.text=element_text(size=34),axis.title=element_text(size=36),legend.text=element_text(size=22),legend.title = element_text(size=34), axis.line = element_line(colour = "black"), axis.line.x = element_blank(), axis.line.y = element_blank(), axis.ticks.y = element_line(color = "black", size = 3.5), axis.ticks.length = unit (.3, "cm"), axis.ticks.x = element_blank())
perCDS
#Strip chart, mutation rate per genome
mycols<-c('blue','red')
pergenome <- ggplot(MAALL, aes(x=strain, y=per_genome_per_gen)) +
geom_jitter(
aes(shape = strain, color = strain), #I cut out the "shape = Evolution, " part of the aes so that all shapes would be the same shape
position = position_jitterdodge(jitter.width = .9, dodge.width = .2),
size = 1, stroke = 2.3) +
scale_shape_manual(values = c(15,15)) +#12 is a square with a vertical cross inside it
stat_summary(
aes(color = strain),
fun.data = "mean_se", fun.args = list(mult = (2)), #mean_sdl add +/- standard deviation; mult=1 means that it is SD*1 that is drawn.  Mean_se draws the standard error of the mean
geom = "pointrange", size = 1.5, shape=95,
position = position_dodge(0.2),
show.legend = FALSE
) +
scale_color_manual(values = mycols) +
labs(x="\nStrain",y="muts/genome/gen\n") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),panel.background = element_blank(), axis.line = element_line(colour = "black")) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),panel.background = element_blank(), panel.border = element_rect(color = "black", fill = NA, size = 3.5), axis.line = element_line(colour = "black")) +
theme(legend.position = "none",legend.key=element_blank(),axis.text=element_text(size=34),axis.title=element_text(size=36),legend.text=element_text(size=22),legend.title = element_text(size=34), axis.line = element_line(colour = "black"), axis.line.x = element_blank(), axis.line.y = element_blank(), axis.ticks.y = element_line(color = "black", size = 3.5), axis.ticks.length = unit (.3, "cm"), axis.ticks.x = element_blank())
pergenome
myfigure<- ggarrange(pernt, muttypep, SNMp, labels = c("A","B","C"), heights = c(1,1,1), ncol = 1, nrow=3, align = "h")
myfigure
myspectrum<-ggarrange(muttypep, SNMp, labels = c("A","B"), ncol = 2, nrow=1)
myspectrum
SNMp <- ggplot(MASNM, aes(x = mut, y = prop)) +
geom_bar(
aes(color = strain, fill = strain),
stat = "identity", position = position_dodge(width=0.75),
width = 0.35
) +
ylim(0, 1) +
xlim(0.9,1.5) +
scale_color_manual(values = c("blue", "red"))+
scale_fill_manual(values = c("blue", "red")) +
geom_text(aes(label = prop2, group = strain), position = position_dodge(0.75), vjust = -0.3, size = 5.5)+
labs(x="\nMutation type",y="Proportion\n") +
theme(axis.text.x = element_text(angle=-45, vjust=0,hjust=0.2, size =26))+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),panel.background = element_blank(),panel.border = element_rect(color = "black", fill = NA, size = 3.5), axis.line = element_line(colour = "black")) +
theme(legend.key=element_blank(),legend.key.size = unit(2, "lines"),axis.text=element_text(size=34),axis.title=element_text(size=36),legend.text=element_text(size=22),legend.title = element_text(size=34), axis.line.x.bottom = element_blank(), axis.line.y.left = element_blank(), axis.ticks.y = element_line(color = "black", size = 3.5), axis.ticks.length = unit(.3, "cm"), axis.ticks.x = element_blank())
SNMp
SNMp <- ggplot(MASNM, aes(x = mut, y = prop)) +
geom_bar(
aes(color = strain, fill = strain),
stat = "identity", position = position_dodge(width=0.75),
width = 0.35
) +
ylim(0, 1) +
#xlim(0.9,1.5) +
scale_color_manual(values = c("blue", "red"))+
scale_fill_manual(values = c("blue", "red")) +
geom_text(aes(label = prop2, group = strain), position = position_dodge(0.75), vjust = -0.3, size = 5.5)+
labs(x="\nMutation type",y="Proportion\n") +
theme(axis.text.x = element_text(angle=-45, vjust=0,hjust=0.2, size =26))+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),panel.background = element_blank(),panel.border = element_rect(color = "black", fill = NA, size = 3.5), axis.line = element_line(colour = "black")) +
theme(legend.key=element_blank(),legend.key.size = unit(2, "lines"),axis.text=element_text(size=34),axis.title=element_text(size=36),legend.text=element_text(size=22),legend.title = element_text(size=34), axis.line.x.bottom = element_blank(), axis.line.y.left = element_blank(), axis.ticks.y = element_line(color = "black", size = 3.5), axis.ticks.length = unit(.3, "cm"), axis.ticks.x = element_blank())
SNMp
SNMp <- ggplot(MASNM, aes(x = mut, y = prop)) +
geom_bar(
aes(color = strain, fill = strain),
stat = "identity", position = position_dodge(width=0.75),
width = 0.35
) +
#ylim(0, 1) +
#xlim(0.9,1.5) +
coord_fixed(ratio=0.35,clip="off")+
scale_color_manual(values = c("blue", "red"))+
scale_fill_manual(values = c("blue", "red")) +
geom_text(aes(label = prop2, group = strain), position = position_dodge(0.75), vjust = -0.3, size = 5.5)+
labs(x="\nMutation type",y="Proportion\n") +
theme(axis.text.x = element_text(angle=-45, vjust=0,hjust=0.2, size =26))+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),panel.background = element_blank(),panel.border = element_rect(color = "black", fill = NA, size = 3.5), axis.line = element_line(colour = "black")) +
theme(legend.key=element_blank(),legend.key.size = unit(2, "lines"),axis.text=element_text(size=34),axis.title=element_text(size=36),legend.text=element_text(size=22),legend.title = element_text(size=34), axis.line.x.bottom = element_blank(), axis.line.y.left = element_blank(), axis.ticks.y = element_line(color = "black", size = 3.5), axis.ticks.length = unit(.3, "cm"), axis.ticks.x = element_blank())
SNMp
SNMp <- ggplot(MASNM, aes(x = mut, y = prop)) +
geom_bar(
aes(color = strain, fill = strain),
stat = "identity", position = position_dodge(width=0.75),
width = 0.35
) +
#ylim(0, 1) +
#xlim(0.9,1.5) +
coord_fixed(ratio=1.35,clip="off")+
scale_color_manual(values = c("blue", "red"))+
scale_fill_manual(values = c("blue", "red")) +
geom_text(aes(label = prop2, group = strain), position = position_dodge(0.75), vjust = -0.3, size = 5.5)+
labs(x="\nMutation type",y="Proportion\n") +
theme(axis.text.x = element_text(angle=-45, vjust=0,hjust=0.2, size =26))+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),panel.background = element_blank(),panel.border = element_rect(color = "black", fill = NA, size = 3.5), axis.line = element_line(colour = "black")) +
theme(legend.key=element_blank(),legend.key.size = unit(2, "lines"),axis.text=element_text(size=34),axis.title=element_text(size=36),legend.text=element_text(size=22),legend.title = element_text(size=34), axis.line.x.bottom = element_blank(), axis.line.y.left = element_blank(), axis.ticks.y = element_line(color = "black", size = 3.5), axis.ticks.length = unit(.3, "cm"), axis.ticks.x = element_blank())
SNMp
SNMp <- ggplot(MASNM, aes(x = mut, y = prop)) +
geom_bar(
aes(color = strain, fill = strain),
stat = "identity", position = position_dodge(width=0.75),
width = 0.35
) +
#ylim(0, 1) +
#xlim(0.9,1.5) +
coord_fixed(ratio=5,clip="off")+
scale_color_manual(values = c("blue", "red"))+
scale_fill_manual(values = c("blue", "red")) +
geom_text(aes(label = prop2, group = strain), position = position_dodge(0.75), vjust = -0.3, size = 5.5)+
labs(x="\nMutation type",y="Proportion\n") +
theme(axis.text.x = element_text(angle=-45, vjust=0,hjust=0.2, size =26))+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),panel.background = element_blank(),panel.border = element_rect(color = "black", fill = NA, size = 3.5), axis.line = element_line(colour = "black")) +
theme(legend.key=element_blank(),legend.key.size = unit(2, "lines"),axis.text=element_text(size=34),axis.title=element_text(size=36),legend.text=element_text(size=22),legend.title = element_text(size=34), axis.line.x.bottom = element_blank(), axis.line.y.left = element_blank(), axis.ticks.y = element_line(color = "black", size = 3.5), axis.ticks.length = unit(.3, "cm"), axis.ticks.x = element_blank())
SNMp
SNMp <- ggplot(MASNM, aes(x = mut, y = prop)) +
geom_bar(
aes(color = strain, fill = strain),
stat = "identity", position = position_dodge(width=0.75),
width = 0.2
) +
#ylim(0, 1) +
#xlim(0.9,1.5) +
coord_fixed(ratio=5,clip="off")+
scale_color_manual(values = c("blue", "red"))+
scale_fill_manual(values = c("blue", "red")) +
geom_text(aes(label = prop2, group = strain), position = position_dodge(0.75), vjust = -0.3, size = 5.5)+
labs(x="\nMutation type",y="Proportion\n") +
theme(axis.text.x = element_text(angle=-45, vjust=0,hjust=0.2, size =26))+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),panel.background = element_blank(),panel.border = element_rect(color = "black", fill = NA, size = 3.5), axis.line = element_line(colour = "black")) +
theme(legend.key=element_blank(),legend.key.size = unit(2, "lines"),axis.text=element_text(size=34),axis.title=element_text(size=36),legend.text=element_text(size=22),legend.title = element_text(size=34), axis.line.x.bottom = element_blank(), axis.line.y.left = element_blank(), axis.ticks.y = element_line(color = "black", size = 3.5), axis.ticks.length = unit(.3, "cm"), axis.ticks.x = element_blank())
SNMp
SNMp <- ggplot(MASNM, aes(x = mut, y = prop)) +
geom_bar(
aes(color = strain, fill = strain),
stat = "identity", position = position_dodge(width=0.75),
width = 0.2
) +
#ylim(0, 1) +
#xlim(0.9,1.5) +
#coord_fixed(ratio=5,clip="off")+
scale_color_manual(values = c("blue", "red"))+
scale_fill_manual(values = c("blue", "red")) +
geom_text(aes(label = prop2, group = strain), position = position_dodge(0.75), vjust = -0.3, size = 5.5)+
labs(x="\nMutation type",y="Proportion\n") +
theme(axis.text.x = element_text(angle=-45, vjust=0,hjust=0.2, size =26))+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),panel.background = element_blank(),panel.border = element_rect(color = "black", fill = NA, size = 3.5), axis.line = element_line(colour = "black")) +
theme(legend.key=element_blank(),legend.key.size = unit(2, "lines"),axis.text=element_text(size=34),axis.title=element_text(size=36),legend.text=element_text(size=22),legend.title = element_text(size=34), axis.line.x.bottom = element_blank(), axis.line.y.left = element_blank(), axis.ticks.y = element_line(color = "black", size = 3.5), axis.ticks.length = unit(.3, "cm"), axis.ticks.x = element_blank())
SNMp
SNMp <- ggplot(MASNM, aes(x = mut, y = prop)) +
geom_bar(
aes(color = strain, fill = strain),
stat = "identity", position = position_dodge(width=0.75),
width = 0.2
) +
#ylim(0, 1) +
#xlim(0.9,1.5) +
#coord_fixed(ratio=5,clip="off")+
scale_color_manual(values = c("blue", "red"))+
scale_fill_manual(values = c("blue", "red")) +
geom_text(aes(label = prop2, group = strain), position = position_dodge(0.85), vjust = -0.3, size = 5.5)+
labs(x="\nMutation type",y="Proportion\n") +
theme(axis.text.x = element_text(angle=-45, vjust=0,hjust=0.2, size =26))+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),panel.background = element_blank(),panel.border = element_rect(color = "black", fill = NA, size = 3.5), axis.line = element_line(colour = "black")) +
theme(legend.key=element_blank(),legend.key.size = unit(2, "lines"),axis.text=element_text(size=34),axis.title=element_text(size=36),legend.text=element_text(size=22),legend.title = element_text(size=34), axis.line.x.bottom = element_blank(), axis.line.y.left = element_blank(), axis.ticks.y = element_line(color = "black", size = 3.5), axis.ticks.length = unit(.3, "cm"), axis.ticks.x = element_blank())
SNMp
myfigure<- ggarrange(pernt, muttypep, SNMp, labels = c("A","B","C"), heights = c(1,1,1), ncol = 1, nrow=3, align = "h")
myfigure
myspectrum<-ggarrange(muttypep, SNMp, labels = c("A","B"), ncol = 2, nrow=1)
myspectrum
rm(list=ls())
require("knitr")
getwd()
#setwd("~/GitHub/MinimalCell") ######Even though this
#opts_knit$set(root.dir = "~\\..\\GitHub\\MinimalCell")
knitr::opts_chunk$set(root.dir = "~\\..\\GitHub\\MinimalCell")
getwd()
# Load mutation rate data
#ma.raw <- read.csv("data2/MA_summary_for_R.csv", header = TRUE, sep =",")
ma.raw <- read.csv("data2\\MA_summary_for_R.csv", header = TRUE, sep =",")
rm(list=ls())
require("knitr")
getwd()
#setwd("~/GitHub/MinimalCell") ######Even though this is in the r setup chunk, it doesn't stick through multiple chunks on Windows on RStudio 1.3.1073
#opts_knit$set(root.dir = "~\\..\\GitHub\\MinimalCell")
#knitr::opts_chunk$set(root.dir = "~\\..\\GitHub\\MinimalCell")
getwd()
setwd("~\\..\\GitHub\\MinimalCell")
# Load mutation rate data
#ma.raw <- read.csv("data2/MA_summary_for_R.csv", header = TRUE, sep =",")
ma.raw <- read.csv("data2\\MA_summary_for_R.csv", header = TRUE, sep =",")
getwd()
setwd("~\\..\\GitHub\\MinimalCell")
# Load mutation rate data
#ma.raw <- read.csv("data2/MA_summary_for_R.csv", header = TRUE, sep =",")
ma.raw <- read.csv("data2\\MA_summary_for_R.csv", header = TRUE, sep =",")
setwd("~\\..\\GitHub\\MinimalCell")
rm(list=ls())
require("knitr")
getwd()
#setwd("~/GitHub/MinimalCell")
#opts_knit$set(root.dir = "~\\..\\GitHub\\MinimalCell")
#knitr::opts_chunk$set(root.dir = "~\\..\\GitHub\\MinimalCell")
getwd()
# Load mutation rate data
#ma.raw <- read.csv("data2/MA_summary_for_R.csv", header = TRUE, sep =",")
ma.raw <- read.csv("data2\\MA_summary_for_R.csv", header = TRUE, sep =",")
getwd()
# Load mutation rate data
#ma.raw <- read.csv("data2/MA_summary_for_R.csv", header = TRUE, sep =",")
ma.raw <- read.csv(".\\data2\\MA_summary_for_R.csv", header = TRUE, sep =",")
# Load mutation rate data
#ma.raw <- read.csv("data2/MA_summary_for_R.csv", header = TRUE, sep =",")
ma.raw <- read.csv(".\\data2\\MA_summary_for_R.csv", header = TRUE, sep =",")
dat==========
# Load mutation rate data
#ma.raw <- read.csv("data2/MA_summary_for_R.csv", header = TRUE, sep =",")
ma.raw <- read.csv(".\\data2\\MA_summary_for_R.csv", header = TRUE, sep =",")
# Load mutation rate data
#ma.raw <- read.csv("data2/MA_summary_for_R.csv", header = TRUE, sep =",")
ma.raw <- read.csv("~\\..\\GitHub\\MinimalCell\\data2\\MA_summary_for_R.csv", header = TRUE, sep =",")
# Preserve row names
ma <- as_tibble(ma.raw)
require("png")
require("dplyr")
require("vioplot")
require("grid")
# Preserve row names
ma <- as_tibble(ma.raw)
# Set data as factors and rename levels
ma$strain <- as.factor(ma$strain)
levels(ma$strain)[levels(ma$strain)=="MA_s1"] <- "Wildtype"
levels(ma$strain)[levels(ma$strain)=="MA_3B"] <- "Minimal"
ma$strain <- factor(ma$strain, levels=c("Wildtype","Minimal"))
# Subset mutation rate data by strain
mr.wt  <- filter(ma, strain== "Wildtype") %>%
dplyr::select(per_nt_per_gen)
mr.min  <- filter(ma, strain== "Minimal") %>%
dplyr::select(per_nt_per_gen)
# Test for equal variance: P = 0.42 --> homogeneous variance
equal.var <- var.test(mr.wt$per_nt_per_gen, mr.min$per_nt_per_gen)
# Test for differences between treatments: P = 0.54 --> no difference
mr.ttest <- t.test(mr.wt$per_nt_per_gen, mr.min$per_nt_per_gen, var.equal = TRUE)
ma.type.raw <- read.csv("~\\..\\GitHub\\MinimalCell\\data2\\MA_grouped_bar_mut.types.csv")
# Preserve row names
ma.type <- as_tibble(ma.type.raw)
# Set data as factors and rename levels
ma.type$strain <- as.factor(ma.type$strain)
ma.type$mut <- as.factor(ma.type$mut)
levels(ma.type$strain)[levels(ma.type$strain)=="s1"] <- "Wildtype"
levels(ma.type$strain)[levels(ma.type$strain)=="3B"] <- "Minimal"
levels(ma.type$mut)[levels(ma.type$mut)=="SNM"] <- "Single-nucleotide"
ma.type$strain <- factor(ma.type$strain, levels=c("Wildtype","Minimal"))
ma.type$mut <- factor(ma.type$mut, levels = c("Insertion","Deletion","Over 100 bp","Single-nucleotide"))
ma.type <- ma.type %>% mutate(prop2 = sprintf("%0.2f",prop))
# Reorder for plotting
order.1 <- c(2,4,6,1,3,5)
ma.type <- data.frame(ma.type,order.1)
ma.type <- ma.type[order(ma.type$order.1),]
# Make table for contingency analyses
ma.type.mat <- matrix(ma.type$count, ncol = 2, byrow = T)
colnames(ma.type.mat) <- c("minimal","wildtype")
rownames(ma.type.mat) <- c("insertion","deletion","snm")
ma.type.tab <- as.table(ma.type.mat)
ma.type.tab.margins <- addmargins(ma.type.tab)
# X-squared = 4.1617, df = 2, p-value = 0.1248
ma.type.chi <- chisq.test(ma.type.tab)
# Posthoc analysis
ma.type.z <- as.data.frame(ma.type.chi$stdres)
ma.type.x2 <- ma.type.z$Freq^2
ma.type.p <- pchisq(ma.type.x2, df = 1, lower.tail = FALSE)
ma.type.p.adj <- p.adjust(ma.type.p, method="BH")
ma.type.post.hoc <- data.frame(ma.type.z, ma.type.x2, ma.type.p, ma.type.p.adj)
colnames(ma.type.post.hoc) <- c("type", "strain", "z", "chi2", "p", "p.adj")
#Now test in terms of the total amount of sequence inserted/deleted
x2s1<-sum(MAs1$in_len_tot);n2s1<-x2s1+sum(MAs1$del_len_tot)
rm(list = ls())
#library(ggplot2);library(tidyverse);library(dplyr);library(ggpubr);library(Hmisc)
package.list <- c('vegan', 'ade4', 'viridis', 'gplots', 'BiodiversityR', 'indicspecies', 'ggplot2', 'tidyverse', 'dplyr', 'ggpubr', 'Hmisc')
for (package in package.list) {
if (!require(package, character.only=T, quietly=T)) {
install.packages(package)
library(package, character.only=T)
}
}
setwd("~\\..\\GitHub\\MinimalCell")
myALL<-read_csv("data\\MA\\MA_summary_for_R.csv")
my3B<-read_csv("data\\MA\\MA_3B_summary_for_R.csv")
mys1<-read_csv("data\\MA\\MA_s1_summary_for_R.csv")
MAALL<-as_tibble(myALL)
MA3B<-as_tibble(my3B)
MAs1<-as_tibble(mys1)
MAALL$strain <- as.factor(MAALL$strain)
levels(MAALL$strain)[levels(MAALL$strain)=="MA_s1"] <- "Wildtype"
levels(MAALL$strain)[levels(MAALL$strain)=="MA_3B"] <- "Minimal"
MAALL$strain <- factor(MAALL$strain, levels=c("Wildtype","Minimal"))
####Part 1: test for insertion bias or deletion bias
x1s1<-sum(MAs1$'in')
n1s1<-sum(MAs1$'in')+sum(MAs1$del)
indelprops1 <- prop.test(x = x1s1, n = n1s1, alternative = 'two.sided');indelprops1
#sample prop = 0.215; P-val < 2.2e-16
x13B <- sum(MA3B$'in')
n13B<-sum(MA3B$'in')+sum(MA3B$del)
indelprop3B<-prop.test(x=x13B,n=n13B,p=0.5,alternative="two.sided"); indelprop3B
#sample prop = 0.241; P-val = 4.0e-06
#Significant deletion bias, in terms of number-of-dels > number-of-ins, by chisq test for both strains
twoprop_indel<-prop.test(x=c(x1s1, x13B),n=c(n1s1,n13B),alternative = "two.sided"); twoprop_indel
#p-val > 0.05
#infer that there is not a significant difference in the magnitude of the deletion bias between the two strains
#Now test in terms of the total amount of sequence inserted/deleted
x2s1<-sum(MAs1$in_len_tot);n2s1<-x2s1+sum(MAs1$del_len_tot)
indellentotprops1<-prop.test(x=x2s1,n=n2s1,p=0.5,alternative = 'two.sided');indellentotprops1
x23B<-sum(MA3B$in_len_tot);n23B<-x23B+sum(MA3B$del_len_tot)
indellentotprop3B<-prop.test(x=x23B,n=n23B,p=0.5,alternative = 'two.sided');indellentotprop3B
#Now test in terms of the total amount of sequence inserted/deleted
x2s1<-sum(MAs1$in_len_tot);n2s1<-x2s1+sum(MAs1$del_len_tot)
indellentotprops1<-prop.test(x=x2s1,n=n2s1,p=0.5,alternative = 'two.sided');indellentotprops1
x23B<-sum(MA3B$in_len_tot);n23B<-x23B+sum(MA3B$del_len_tot)
indellentotprop3B<-prop.test(x=x23B,n=n23B,p=0.5,alternative = 'two.sided');indellentotprop3B
twoprop_indellentot <- prop.test(x=c(x2s1,x23B),n=c(n2s1,n23B),alternative = 'two.sided');twoprop_indellentot
#Now compare the average sizes of ins among the lines and average sizes of dels within the lines
#test for normality
shapiro.test(na.omit(MAs1$in_len_avg));shapiro.test(na.omit(MAs1$del_len_avg))
ggdensity(na.omit(MAs1$in_len_avg));ggdensity(na.omit(MAs1$del_len_avg))
wilcox.test(x=na.omit(MAs1$in_len_avg),y=na.omit(MAs1$del_len_avg),mu=0,alternative = 'two.sided',paired=F)
#I here use t-test anyway, since the sample size is large. n>=90. I want to use a t-test because I want to test a hypothesis about a difference in means, not a difference in medians.
#test for equal variances
var.test(x=na.omit(MAs1$in_len_avg),y=na.omit(MAs1$del_len_avg),ratio=1,alternative = 'two.sided')
#F=0.016, p-val < 2.2e-16
indellenavgs1<-t.test(x=na.omit(MAs1$in_len_avg),y=na.omit(MAs1$del_len_avg),mu=0,alternative = 'two.sided',var.equal = F);indellenavgs1
#Repeat this analysis now for 3B
#test for normality
shapiro.test(na.omit(MA3B$in_len_avg));shapiro.test(na.omit(MA3B$del_len_avg))
ggdensity(na.omit(MA3B$in_len_avg));ggdensity(na.omit(MA3B$del_len_avg))
wilcox.test(x=na.omit(MA3B$in_len_avg),y=na.omit(MA3B$del_len_avg),mu=0,alternative = 'two.sided',paired=F)
#test for equal variances
var.test(x=na.omit(MA3B$in_len_avg),y=na.omit(MA3B$del_len_avg),ratio=1,alternative = 'two.sided')
#F=6.3, p-val < 4.2e-06
indellenavg3B<-t.test(x=na.omit(MA3B$in_len_avg),y=na.omit(MA3B$del_len_avg),mu=0,alternative = 'two.sided',var.equal = F);indellenavg3B
#test for equal variances
var.test(x=na.omit(MAs1$in_len_avg),y=na.omit(MA3B$in_len_avg),ratio=1,alternative = 'two.sided')
#Now test in terms of the total amount of sequence inserted/deleted
x2s1<-sum(MAs1$ALLin_len_tot);n2s1<-x2s1+sum(MAs1$ALLdel_len_tot)
indellentotprops1<-prop.test(x=x2s1,n=n2s1,p=0.5,alternative = 'two.sided');indellentotprops1
####Part 1: test for insertion bias or deletion bias
x1s1<-sum(MAs1$'in')+sum(MAs1$SVin)
n1s1<-sum(MAs1$'in')+sum(MAs1$SVin)+sum(MAs1$del)
indelprops1 <- prop.test(x = x1s1, n = n1s1, alternative = 'two.sided');indelprops1
indelprop3B<-prop.test(x=x13B,n=n13B,p=0.5,alternative="two.sided"); indelprop3B
twoprop_indel<-prop.test(x=c(x1s1, x13B),n=c(n1s1,n13B),alternative = "two.sided"); twoprop_indel
x23B<-sum(MA3B$ALLin_len_tot);n23B<-x23B+sum(MA3B$ALLdel_len_tot)
indellentotprop3B<-prop.test(x=x23B,n=n23B,p=0.5,alternative = 'two.sided');indellentotprop3B
twoprop_indellentot <- prop.test(x=c(x2s1,x23B),n=c(n2s1,n23B),alternative = 'two.sided');twoprop_indellentot
#Now compare the average sizes of ins among the lines and average sizes of dels within the lines
#test for normality
shapiro.test(na.omit(MAs1$in_len_avg));shapiro.test(na.omit(MAs1$del_len_avg))
#I here use t-test anyway, since the sample size is large. n>=90. I want to use a t-test because I want to test a hypothesis about a difference in means, not a difference in medians.
#test for equal variances
var.test(x=na.omit(MAs1$ALLin_len_avg),y=na.omit(MAs1$ALLdel_len_avg),ratio=1,alternative = 'two.sided')
#F=0.016, p-val < 2.2e-16
indellenavgs1<-t.test(x=na.omit(MAs1$in_len_avg),y=na.omit(MAs1$del_len_avg),mu=0,alternative = 'two.sided',var.equal = F);indellenavgs1
#F=0.016, p-val < 2.2e-16
indellenavgs1<-t.test(x=na.omit(MAs1$ALLin_len_avg),y=na.omit(MAs1$ALLdel_len_avg),mu=0,alternative = 'two.sided',var.equal = F);indellenavgs1
#PART 4: Do a greater proportion of lines possess a large (> 100 bp) mutation in one strain versus the other?
max(MAs1$SV);max(MA3B$SV)
#since the max number of SV mutations in any line is 1, I can just take a sum to get the number of lines with a large mut
x5s1=sum(MAs1$SV);n5s1=85;x53B=sum(MA3B$SV);n53B=57#where 85 and 57 are the number of lines
twoprop_large <- prop.test(x=c(x5s1,x53B),n=c(n5s1,n43B),alternative = 'two.sided');twoprop_large
twoprop_large <- prop.test(x=c(x5s1,x53B),n=c(n5s1,n53B),alternative = 'two.sided');twoprop_large
#first, per nt (which is the interesting comparison as far as cell biology goes)
#test for normality
shapiro.test(MAs1$per_nt_per_gen);shapiro.test(MA3B$per_nt_per_gen)
ggdensity(MAs1$per_nt_per_gen);ggdensity(MA3B$per_nt_per_gen)
wilcox.test(x=MAs1$per_nt_per_gen,y=MA3B$per_nt_per_gen,mu=0,alternative = 'two.sided',paired=F)
shapiro.test(log(MAs1$per_nt_per_gen));shapiro.test(log(MA3B$per_nt_per_gen))
ggdensity(log(MAs1$per_nt_per_gen));ggdensity(log(MA3B$per_nt_per_gen))
wilcox.test(x=log(MAs1$per_nt_per_gen),y=log(MA3B$per_nt_per_gen),mu=0,alternative = 'two.sided',paired=F)
#I can use t-test anyway, since the sample size is large. I want to use a t-test because I want to test a hypothesis about a difference in means, not a difference in medians.
#test for equal variances
var.test(x=MAs1$per_nt_per_gen,y=MA3B$per_nt_per_gen,ratio=1,alternative = 'two.sided')
#p >0.05
pernt_twostrains<-t.test(x=MAs1$per_nt_per_gen,y=MA3B$per_nt_per_gen,mu=0,alternative = 'two.sided',var.equal = T);pernt_twostrains
#I can use t-test anyway, since the sample size is large. I want to use a t-test because I want to test a hypothesis about a difference in means, not a difference in medians.
#test for equal variances
var.test(x=MAs1$per_nt_per_gen,y=MA3B$per_nt_per_gen,ratio=1,alternative = 'two.sided')
var.test(x=log(MAs1$per_nt_per_gen),y=log(MA3B$per_nt_per_gen),ratio=1,alternative = 'two.sided')
#F=0.717, p-val = 0.144
pernt_twostrains_log<-t.test(x=log(MAs1$per_nt_per_gen),y=log(MA3B$per_nt_per_gen),mu=0,alternative = 'two.sided',var.equal = T);pernt_twostrains_log
#######
###Before moving on: Let's compare the bps-only mutation rates.
shapiro.test(log(MAs1$bpsub_per_nt));shapiro.test(log(MA3B$bpsub_per_nt))
ggdensity(log(MAs1$bpsub_per_nt));ggdensity(log(MA3B$bpsub_per_nt))
wilcox.test(x=log(MAs1$bpsub_per_nt),y=log(MA3B$bpsub_per_nt),mu=0,alternative = 'two.sided',paired=F)
#W=2409,p=0.957
var.test(x=log(MAs1$bpsub_per_nt),y=log(MA3B$bpsub_per_nt),ratio=1,alternative = 'two.sided')
#F=0.852, p-val = 0.500
bpsub_pernt_twostrains_log<-t.test(x=log(MAs1$bpsub_per_nt),y=log(MA3B$bpsub_per_nt),mu=0,alternative = 'two.sided',var.equal = T);bpsub_pernt_twostrains_log
bpsub_pernt_twostrains<-t.test(x=(MAs1$bpsub_per_nt),y=(MA3B$bpsub_per_nt),mu=0,alternative = 'two.sided',var.equal = T);bpsub_pernt_twostrains
#second, per total CDS. This is Mike Lynch's evolutionary question---a test of the DBH---and DBH is not testable here, because the minimal cell syn3B has not had any evolution.
#HOWEVER it is an interesting question to the extent that it would have altered the dynamics during the NSE!
#test for normality
shapiro.test(MAs1$per_CDS_per_gen);shapiro.test(MA3B$per_CDS_per_gen)
ggdensity(MAs1$per_CDS_per_gen);ggdensity(MA3B$per_CDS_per_gen)
wilcox.test(x=MAs1$per_CDS_per_gen,y=MA3B$per_CDS_per_gen,mu=0,alternative = 'two.sided',paired=F)
shapiro.test(log(MAs1$per_CDS_per_gen));shapiro.test(log(MA3B$per_CDS_per_gen))
ggdensity(log(MAs1$per_CDS_per_gen));ggdensity(log(MA3B$per_CDS_per_gen))
wilcox.test(x=log(MAs1$per_CDS_per_gen),y=log(MA3B$per_CDS_per_gen),mu=0,alternative = 'two.sided',paired=F)
#test for equal variances
var.test(x=MAs1$per_CDS_per_gen,y=MA3B$per_CDS_per_gen,ratio=1,alternative = 'two.sided')
#F=1.560, p-val = 0.0337
perCDS_twostrains<-t.test(x=MAs1$per_CDS_per_gen,y=MA3B$per_CDS_per_gen,mu=0,alternative = 'two.sided',var.equal = F);perCDS_twostrains
var.test(x=log(MAs1$per_CDS_per_gen),y=log(MA3B$per_CDS_per_gen),ratio=1,alternative = 'two.sided')
#test for equal variances
var.test(x=MAs1$per_CDS_per_gen,y=MA3B$per_CDS_per_gen,ratio=1,alternative = 'two.sided')
#F=1.560, p-val = 1.6e-05
perCDS_twostrains<-t.test(x=MAs1$per_CDS_per_gen,y=MA3B$per_CDS_per_gen,mu=0,alternative = 'two.sided',var.equal = F);perCDS_twostrains
#F=0.816, p-val = 0.44
perCDS_twostrains_log<-t.test(x=log(MAs1$per_CDS_per_gen),y=log(MA3B$per_CDS_per_gen),mu=0,alternative = 'two.sided',var.equal = T);perCDS_twostrains_log
#Next step is comparing mutation rate per GENOME per gen. This is more impt than per CDS for the NSE I think (even tho per CDS is more important for Mike Lynch's comparative question!)
shapiro.test(MAs1$per_genome_per_gen);shapiro.test(MA3B$per_genome_per_gen)
ggdensity(MAs1$per_genome_per_gen);ggdensity(MA3B$per_genome_per_gen)
wilcox.test(x=MAs1$per_genome_per_gen,y=MA3B$per_genome_per_gen,mu=0,alternative = 'two.sided',paired=F)
shapiro.test(log(MAs1$per_genome_per_gen));shapiro.test(log(MA3B$per_genome_per_gen))
ggdensity(log(MAs1$per_genome_per_gen));ggdensity(log(MA3B$per_genome_per_gen))
wilcox.test(x=log(MAs1$per_genome_per_gen),y=log(MA3B$per_genome_per_gen),mu=0,alternative = 'two.sided',paired=F)
wilcox.test(x=log(MAs1$per_genome_per_gen),y=log(MA3B$per_genome_per_gen),mu=0,alternative = 'two.sided',paired=F)
#test for equal variances
var.test(x=MAs1$per_genome_per_gen,y=MA3B$per_genome_per_gen,ratio=1,alternative = 'two.sided')
#F=3.3, p-val < 0.01
pergenome_twostrains<-t.test(x=MAs1$per_genome_per_gen,y=MA3B$per_genome_per_gen,mu=0,alternative = 'two.sided',var.equal = F);pergenome_twostrains
var.test(x=log(MAs1$per_genome_per_gen),y=log(MA3B$per_genome_per_gen),ratio=1,alternative = 'two.sided')
#F=0.816, p-val = 0.44
pergenome_twostrains_log<-t.test(x=log(MAs1$per_genome_per_gen),y=log(MA3B$per_genome_per_gen),mu=0,alternative = 'two.sided',var.equal = T);pergenome_twostrains_log
#Next, for each strain, look at the total number of CDS SNMs and non-CDS SNMs. Do they occur in proportions significantly different from the null expectation?
x6s1<-sum(MAs1$in_CDS)
n6s1<-sum(MAs1$in_CDS)+sum(MAs1$not_in_CDS)
CDSprops1 <- prop.test(x = x6s1, n = n6s1, p = (926310/1078809), alternative = 'two.sided');CDSprops1
x63B<-sum(MA3B$in_CDS)
n63B<-sum(MA3B$in_CDS)+sum(MA3B$not_in_CDS)
CDSprops1 <- prop.test(x = x63B, n = n63B, p = (479721/543379), alternative = 'two.sided');CDSprops1
