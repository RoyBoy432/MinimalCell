t.test(c(filter(myydf, Selection == "Long",Genotype=="pmr1")$e0),c(filter(myydf, Selection == "No Long",Genotype=="rpl19a")$e0),paired=F,alternative = "greater",mu=0,var.equal=T)
#P = .7278. Homoscedastic.
t.test(c(filter(myydf, Selection == "Long",Genotype=="pmr1")$e0),c(filter(myydf, Selection == "No Long",Genotype=="pmr1")$e0),paired=F,alternative = "greater",mu=0,var.equal=T)
var.test(c(filter(myydf, Selection == "Long",Genotype=="sch9")$e0),c(filter(myydf, Selection == "No Long",Genotype=="sch9")$e0))
#P = .3613. Homoscedastic.
t.test(c(filter(myydf, Selection == "Long",Genotype=="sch9")$e0),c(filter(myydf, Selection == "No Long",Genotype=="sch9")$e0),paired=F,alternative = "greater",mu=0,var.equal=T)
var.test(c(filter(myydf, Selection == "Long",Genotype=="ypt6")$e0),c(filter(myydf, Selection == "No Long",Genotype=="ypt6")$e0))
#P = .2920. Homoscedastic.
t.test(c(filter(myydf, Selection == "Long",Genotype=="ypt6")$e0),c(filter(myydf, Selection == "No Long",Genotype=="ypt6")$e0),paired=F,alternative = "greater",mu=0,var.equal=T)
var.test(c(filter(myydf, Selection == "Long",Genotype=="tor1")$e0),c(filter(myydf, Selection == "No Long",Genotype=="tor1")$e0))
#P = .1120. Homoscedastic.
t.test(c(filter(myydf, Selection == "Long",Genotype=="tor1")$e0),c(filter(myydf, Selection == "No Long",Genotype=="tor1")$e0),paired=F,alternative = "greater",mu=0,var.equal=T)
var.test(c(filter(myydf, Selection == "Long",Genotype=="JD174")$e0),c(filter(myydf, Selection == "No Long",Genotype=="JD174")$e0))
?var.test
#P = .4977. Homoscedastic.
t.test(c(filter(myydf, Selection == "Long",Genotype=="JD174")$e0),c(filter(myydf, Selection == "No Long",Genotype=="JD174")$e0),paired=F,alternative = "greater",mu=0,var.equal=T)
var.test(c(filter(myydf, Selection == "Long",Genotype=="tif2")$e0),c(filter(myydf, Selection == "No Long",Genotype=="tif2")$e0))
var.test(c(filter(myydf, Selection == "Long",Genotype=="tif2")$e0),c(filter(myydf, Selection == "No Long",Genotype=="tif2")$e0))
#P = .2484. Homoscedastic.
t.test(c(filter(myydf, Selection == "Long",Genotype=="tif2")$e0),c(filter(myydf, Selection == "No Long",Genotype=="tif2")$e0),paired=F,alternative = "greater",mu=0,var.equal=T)
mydf_raw<-read_csv("C:\\Users\\rmoge\\OneDrive - Indiana University\\Lab.Notebook\\20180515_lifespan.mutants\\data\\cases_lifespan.mutants.csv")
mydf<-as_tibble(mydf_raw)
mydf$Selection<-factor(mydf$Selection, levels=c("No Long","Long"))
mydf$Strain<-factor(mydf$Strain, levels=c("2","4","5","9","11","16","19","0"))
#mydf$History<-factor(mydf$History, levels=c("Home","Away"))
mycols<-c("black","black")
myydf<-as.data.frame(mydf)
var.test(c(filter(myydf, Selection == "Long",Genotype=="BY4742")$e0),c(filter(myydf, Selection == "No Long",Genotype=="BY4742")$e0))
#P = .2512. Homoscedastic.
t.test(c(filter(myydf, Selection == "Long",Genotype=="BY4742")$e0),c(filter(myydf, Selection == "No Long",Genotype=="BY4742")$e0),paired=F,alternative = "greater",mu=0,var.equal=T)
#Now t-tests for T50 Long vs. T46 No Long reproduction rate
var.test(c(filter(myydf, Selection == "Long",Genotype=="rpl19a")$off.per.hr_46.50),c(filter(myydf, Selection == "No Long",Genotype=="rpl19a")$off.per.hr_46.50))
#P = .6877. Homoscedastic.
t.test(c(filter(myydf, Selection == "Long",Genotype=="rpl19a")$off.per.hr_46.50),c(filter(myydf, Selection == "No Long",Genotype=="rpl19a")$off.per.hr_46.50),paired=F,alternative = "greater",mu=0,var.equal=T)
#P = .6877. Homoscedastic.
t.test(c(filter(myydf, Selection == "Long",Genotype=="rpl19a")$off.per.hr_46.50),c(filter(myydf, Selection == "No Long",Genotype=="rpl19a")$off.per.hr_46.50),paired=F,alternative = "less",mu=0,var.equal=T)
var.test(c(filter(myydf, Selection == "Long",Genotype=="pmr1")$off.per.hr_46.50),c(filter(myydf, Selection == "No Long",Genotype=="pmr1")$off.per.hr_46.50))
#P = .1402. Homoscedastic.
t.test(c(filter(myydf, Selection == "Long",Genotype=="pmr1")$off.per.hr_46.50),c(filter(myydf, Selection == "No Long",Genotype=="pmr1")$off.per.hr_46.50),paired=F,alternative = "less",mu=0,var.equal=T)
var.test(c(filter(myydf, Selection == "Long",Genotype=="sch9")$off.per.hr_46.50),c(filter(myydf, Selection == "No Long",Genotype=="sch9")$off.per.hr_46.50))
#P = .4927. Homoscedastic.
t.test(c(filter(myydf, Selection == "Long",Genotype=="sch9")$off.per.hr_46.50),c(filter(myydf, Selection == "No Long",Genotype=="sch9")$off.per.hr_46.50),paired=F,alternative = "less",mu=0,var.equal=T)
var.test(c(filter(myydf, Selection == "Long",Genotype=="ypt6")$off.per.hr_46.50),c(filter(myydf, Selection == "No Long",Genotype=="ypt6")$off.per.hr_46.50))
#P = .008352. Heteroscedastic.
t.test(c(filter(myydf, Selection == "Long",Genotype=="ypt6")$off.per.hr_46.50),c(filter(myydf, Selection == "No Long",Genotype=="ypt6")$off.per.hr_46.50),paired=F,alternative = "less",mu=0,var.equal=F)
var.test(c(filter(myydf, Selection == "Long",Genotype=="tor1")$off.per.hr_46.50),c(filter(myydf, Selection == "No Long",Genotype=="tor1")$off.per.hr_46.50))
#P = .9590. Homoscedastic.
t.test(c(filter(myydf, Selection == "Long",Genotype=="tor1")$off.per.hr_46.50),c(filter(myydf, Selection == "No Long",Genotype=="tor1")$off.per.hr_46.50),paired=F,alternative = "less",mu=0,var.equal=T)
var.test(c(filter(myydf, Selection == "Long",Genotype=="tif2")$off.per.hr_46.50),c(filter(myydf, Selection == "No Long",Genotype=="tif2")$off.per.hr_46.50))
#P = .05969. Homoscedastic.
t.test(c(filter(myydf, Selection == "Long",Genotype=="tif2")$off.per.hr_46.50),c(filter(myydf, Selection == "No Long",Genotype=="tif2")$off.per.hr_46.50),paired=F,alternative = "less",mu=0,var.equal=T)
var.test(c(filter(myydf, Selection == "Long",Genotype=="JD174")$off.per.hr_46.50),c(filter(myydf, Selection == "No Long",Genotype=="JD174")$off.per.hr_46.50))
#P = .0348. Heteroscedastic.
t.test(c(filter(myydf, Selection == "Long",Genotype=="JD174")$off.per.hr_46.50),c(filter(myydf, Selection == "No Long",Genotype=="JD174")$off.per.hr_46.50),paired=F,alternative = "less",mu=0,var.equal=F)
var.test(c(filter(myydf, Selection == "Long",Genotype=="BY4742")$off.per.hr_46.50),c(filter(myydf, Selection == "No Long",Genotype=="BY4742")$off.per.hr_46.50))
#P = .008352. Heteroscedastic.
t.test(c(filter(myydf, Selection == "Long",Genotype=="ypt6")$off.per.hr_46.50),c(filter(myydf, Selection == "No Long",Genotype=="ypt6")$off.per.hr_46.50),paired=F,alternative = "less",mu=0,var.equal=F)
var.test(c(filter(myydf, Selection == "Long",Genotype=="BY4742")$off.per.hr_46.50),c(filter(myydf, Selection == "No Long",Genotype=="BY4742")$off.per.hr_46.50))
#P = .7966. Homoscedastic.
t.test(c(filter(myydf, Selection == "Long",Genotype=="BY4742")$off.per.hr_46.50),c(filter(myydf, Selection == "No Long",Genotype=="BY4742")$off.per.hr_46.50),paired=F,alternative = "less",mu=0,var.equal=T)
?aov
e02way<-aov(myydf$e0 ~ myydf$Selection + myydf$Genotype + myydf$Selection*myydf$Genotype)
summary(e02way)
TukeyHSD(e02way)
reprod2way<-aov(myydf$off.per.hr_46.50 ~ myydf$Selection + myydf$Genotype + myydf$Selection*myydf$Genotype)
summary(reprod2way)
TukeyHSD(reprod2way)
setwd("C:\\Users\\rmoge\\GitHub\\MinimalCell")
rm(list=ls())
getwd()
setwd("~/GitHub/MinimalCell")
require("png")
require("dplyr")
require("grid")
sem <- function(x) sqrt(var(x)/length(x))
getwd()
rel.fit.raw <-read.csv("data2\\Interaction_data.csv")
rel.fit.raw <- as_tibble(rel.fit.raw)
# Subset data
rel.fit <- rel.fit.raw %>% group_by(timepoint, strain) %>% summarise(mean = mean(W_1.0), sem = sem(W_1.0))
# Set data as factors and rename levels
rel.fit$strain <- as.factor(rel.fit$strain)
levels(rel.fit$strain)[levels(rel.fit$strain)=="JCVI-syn1.0"] <- "Wildtype"
levels(rel.fit$strain)[levels(rel.fit$strain)=="JCVI-syn3B"] <- "Minimal"
rel.fit$strain <- factor(rel.fit$strain, levels=c("Wildtype","Minimal"))
# Add x-values for plotting
time.x <- c(1,1,3,3)
rel.fit <- data.frame(rel.fit, time.x)
# Subset relative fitness by strain
rel.fit.wt  <- filter(rel.fit, strain == "Wildtype") %>%
dplyr::select(timepoint, mean, sem, time.x)
rel.fit.min  <- filter(rel.fit, strain== "Minimal") %>%
dplyr::select(timepoint, mean, sem, time.x)
rm(list=ls())
getwd()
setwd("~/GitHub/MinimalCell")
rel.fit.raw <- as_tibble(rel.fit.raw)
# Load data
rel.fit.raw <-read.csv("data\\competition\\20201225_20210331")
# Load data
rel.fit.raw <-read.csv("data\\competition\\20201225_20210331\\ftsZ_W_cases.csv")
getwd()
# Load data
rel.fit.raw <-read.csv("data\\competition\\20201225_20210331\\ftsZ_W_cases.csv")
rel.fit.raw <-read.csv("C:\\Users\\rmoge\\GitHub\\MinimalCell\\data\\competition\\20201225_20210331\\ftsZ_W_cases.csv")
rel.fit.raw <- as_tibble(rel.fit.raw)
# Subset data
rel.fit <- rel.fit.raw %>% group_by(timepoint, strain) %>% summarise(mean = mean(W_1.0), sem = sem(W_1.0))
rel.fit.raw
require("png")
require("dplyr")
require("grid")
sem <- function(x) sqrt(var(x)/length(x))
# Subset data
rel.fit <- rel.fit.raw %>% group_by(timepoint, strain) %>% summarise(mean = mean(W_1.0), sem = sem(W_1.0))
rel.fit
# Subset data
rel.fit <- rel.fit.raw %>% group_by(strain, Mutation) %>% summarise(mean = mean(W_1.0), sem = sem(W_1.0))
rel.fit
# Set data as factors and rename levels
rel.fit$strain <- as.factor(rel.fit$strain)
levels(rel.fit$strain)[levels(rel.fit$strain)=="JCVI-syn1.0"] <- "Wildtype"
levels(rel.fit$strain)[levels(rel.fit$strain)=="JCVI-syn3B"] <- "Minimal"
rel.fit$strain <- factor(rel.fit$strain, levels=c("Wildtype","Minimal"))
# Add x-values for plotting
time.x <- c(1,1,3,3)
rel.fit <- data.frame(rel.fit, time.x)
# Subset relative fitness by strain
rel.fit.wt  <- filter(rel.fit, strain == "Wildtype") %>%
dplyr::select(timepoint, mean, sem, time.x)
# Set data as factors and rename levels
rel.fit$strain <- as.factor(rel.fit$strain)
levels(rel.fit$strain)[levels(rel.fit$strain)=="JCVI-syn1.0"] <- "Wildtype"
levels(rel.fit$strain)[levels(rel.fit$strain)=="JCVI-syn3B"] <- "Minimal"
rel.fit$strain <- factor(rel.fit$strain, levels=c("Wildtype","Minimal"))
# Add x-values for plotting
time.x <- c(1,1,3,3)
rel.fit <- data.frame(rel.fit, time.x)
rel.fit
# Subset relative fitness by strain
rel.fit.wt  <- filter(rel.fit, strain == "Wildtype") %>%
dplyr::select(Mutation, mean, sem, time.x)
rel.fit.min  <- filter(rel.fit, strain== "Minimal") %>%
dplyr::select(Mutation, mean, sem, time.x)
rel.fit.min
rel.fit.anc  <- filter(rel.fit.raw, timepoint == "Ancestor") %>%
dplyr::select(strain, W_1.0)
# Test for equal variance: P = p-value = 0.04398 --> non-homogenous variance
equal.var.anc <-var.test(rel.fit.anc$W_1.0[1:3], rel.fit.anc$W_1.0[4:7])
test.anc <- t.test(rel.fit.anc$W_1.0 ~ rel.fit.anc$strain, var.equal = F)
equal.var.anc
rel.fit
# Test for equal variance: P = p-value = 0.04398 --> non-homogenous variance
var.test(c(filter(rel.fit.raw, Strain == "Wildtype", Mutation=="None")$W_1.0),c(filter(relfit.raw, Strain == "Minimal",Mutation=="None")$W_1.0))
# Test for equal variance: P = p-value = 0.04398 --> non-homogenous variance
var.test(c(filter(rel.fit.raw, strain == "Wildtype", Mutation=="None")$W_1.0),c(filter(relfit.raw, strain == "Minimal",Mutation=="None")$W_1.0))
c(filter(rel.fit.raw, strain == "Wildtype", Mutation=="None")$W_1.0
c(filter(rel.fit.raw, strain == "Wildtype", Mutation=="None")$W_1.0)
filter(rel.fit.raw, strain == "Wildtype", Mutation=="None")$W_1.0
rel.fit.raw
# Test for equal variance: P = p-value = 0.04398 --> non-homogenous variance
var.test(c(filter(rel.fit.raw, strain == "JCVI-syn1.0", Mutation=="None")$W_1.0),c(filter(relfit.raw, strain == "JCVI-syn3B",Mutation=="None")$W_1.0))
# Test for equal variance: P = p-value = 0.04398 --> non-homogenous variance
var.test(c(filter(rel.fit.raw, strain == "JCVI-syn1.0", Mutation=="None")$W_1.0),c(filter(rel.fit.raw, strain == "JCVI-syn3B",Mutation=="None")$W_1.0))
#P = .9201. Homoscedastic.
t.test(c(filter(rel.fit.raw, strain == "JCVI-syn1.0", Mutation=="None")$W_1.0),c(filter(rel.fit.raw, strain == "JCVI-syn3B",Mutation=="None")$W_1.0),paired=F,alternative = "two.sided",mu=0,var.equal=T)
# Differences in relative fitness between ftsZ mutants (wt vs. min)?
# Answer = Yes: t = 4.7586, df = 6, p-value = 0.003131
#
var.test(c(filter(rel.fit.raw, strain == "JCVI-syn1.0", Mutation=="ftsZ")$W_1.0),c(filter(rel.fit.raw, strain == "JCVI-syn3B",Mutation=="ftsZ")$W_1.0))
#P = .0002632. Heteroscedastic.
t.test(c(filter(rel.fit.raw, strain == "JCVI-syn1.0", Mutation=="ftsZ")$W_1.0),c(filter(rel.fit.raw, strain == "JCVI-syn3B",Mutation=="ftsZ")$W_1.0),paired=F,alternative = "two.sided",mu=0,var.equal=F)
#Does ftsZ mutation significantly increase the fitness of the wildtype? Yes.
var.test(c(filter(rel.fit.raw, strain == "JCVI-syn1.0", Mutation=="ftsZ")$W_1.0),c(filter(rel.fit.raw, strain == "JCVI-syn1.0",Mutation=="None")$W_1.0))
#P = .05582. Homoscedastic.
t.test(c(filter(rel.fit.raw, strain == "JCVI-syn1.0", Mutation=="ftsZ")$W_1.0),c(filter(rel.fit.raw, strain == "JCVI-syn1.0",Mutation=="None")$W_1.0),paired=F,alternative = "greater",mu=0,var.equal=T)
#Does ftsZ mutation significantly increase the fitness of the minimal? Yes.
var.test(c(filter(rel.fit.raw, strain == "JCVI-syn3B", Mutation=="ftsZ")$W_1.0),c(filter(rel.fit.raw, strain == "JCVI-syn3B",Mutation=="None")$W_1.0))
#P = .3996. Homoscedastic.
t.test(c(filter(rel.fit.raw, strain == "JCVI-syn3B", Mutation=="ftsZ")$W_1.0),c(filter(rel.fit.raw, strain == "JCVI-syn3B",Mutation=="None")$W_1.0),paired=F,alternative = "greater",mu=0,var.equal=T)
rel.fit.wt
png(filename="~/GitHub/MinimalCell/figures/Fig2_ftsZ.png",
width = 1200, height = 1200, res = 96*2)
png(filename="~\\..\\GitHub\\MinimalCell\\figures\\Fig2_ftsZ.png",
width = 1200, height = 1200, res = 96*2)
plot.new()
par(mar = c(7, 7, 5, 7))
# Add wildtype points
plot(rel.fit.wt$time.x, rel.fit.wt$mean, xlim = c(0, 4.55),
ylim = c(0.25, 1.55), type = "p", pch = 21, bg = "blue",
col = "blue", cex = 2, ylab = "", xlab = "",
cex.lab = 1.5, las = 1, lwd = 2, yaxt = "n", xaxt = "n")
box(lwd=2)
# Add minimal points
points(rel.fit.min$time.x, rel.fit.min$mean, pch = 21,
bg = "red", col = "red", lwd = 2, cex = 2)
# Add error bars
arrows(x0 = rel.fit.wt$time.x, y0 = rel.fit.wt$mean,
y1 = rel.fit.wt$mean + rel.fit.wt$sem,
angle = 90, length = 0.1, lwd = 2, col = "blue")
arrows(x0 = rel.fit.wt$time.x, y0 = rel.fit.wt$mean,
y1 = rel.fit.wt$mean - rel.fit.wt$sem,
angle = 90, length=0.1, lwd = 2, col = "blue")
arrows(x0 = rel.fit.min$time.x, y0 = rel.fit.min$mean,
y1 = rel.fit.min$mean + rel.fit.min$sem,
angle = 90, length = 0.1, lwd = 2, col = "red")
arrows(x0 = rel.fit.min$time.x, y0 = rel.fit.min$mean,
y1 = rel.fit.min$mean - rel.fit.min$sem,
angle = 90, length=0.1, lwd = 2, col = "red")
# Add axes and labels
axis(side = 2, lwd.ticks = 2, cex.axis = 1.25, las = 1,
labels = c("0.5", "1.0", "1.5"), at = c(0.5, 1, 1.5))
axis(side = 4, lwd.ticks = 2, cex.axis = 1.25, las = 1,
at=c(0.5, 1, 1.5), labels = F)
axis(side = 3, lwd.ticks = 2, cex.axis = 1.25, las = 1,
at = c(1, 3), labels = F)
axis(side = 1, lwd.ticks = 2, cex.axis = 1.25, las = 1,
labels = c("Ancestor", "ftsZ E315*"),
col.axis = "darkgray", at = c(1, 3))
mtext(expression('Time'), side = 1,
outer = TRUE, cex = 1.5, line = -3.5, adj = 0.45)
mtext(expression("Relative fitness ("~italic("W")~")"), side = 2,
outer = TRUE, cex = 1.5, line = -4, adj = 0.55)
# Add line segments
segments(rel.fit.wt$time.x[1], rel.fit.wt$mean[1], rel.fit.wt$time.x[2],
rel.fit.wt$mean[2], col = "blue", lwd = 2)
segments(rel.fit.min$time.x[1], rel.fit.min$mean[1], rel.fit.min$time.x[2],
rel.fit.min$mean[2], col = "red", lwd = 2)
# Add P-values
#mtext(expression("Timepoint:" ~italic("P")~"= 0.0003"), line = -2.5, cex = 0.80, at = 0.9)
#mtext(expression("Strain:" ~italic("P")~"< 0.0001"), line = -4.0, cex = 0.80, at = 0.75)
# Add strain identifier
text(3.8, rel.fit.wt$mean[2], labels = "Wildtype", cex = 1.0)
text(3.8, rel.fit.min$mean[2], labels = "Minimal", cex = 1.0)
# Close Plot Device
dev.off()
graphics.off()
# Show Plot
img <- readPNG("~\\..\\GitHub\\MinimalCell\\figures\\Fig2_ftsZ.png")
grid.raster(img)
rel.fit
rel.fit.wt
rel.fit.min
# Add x-values for plotting
time.x <- c(1,3,1,3)
rel.fit <- data.frame(rel.fit, time.x)
# Subset relative fitness by strain
rel.fit.wt  <- filter(rel.fit, strain == "Wildtype") %>%
dplyr::select(Mutation, mean, sem, time.x)
rel.fit.min  <- filter(rel.fit, strain== "Minimal") %>%
dplyr::select(Mutation, mean, sem, time.x)
png(filename="~\\..\\GitHub\\MinimalCell\\figures\\Fig2_ftsZ.png",
width = 1200, height = 1200, res = 96*2)
plot.new()
par(mar = c(7, 7, 5, 7))
# Add wildtype points
plot(rel.fit.wt$time.x, rel.fit.wt$mean, xlim = c(0, 4.55),
ylim = c(0.25, 1.55), type = "p", pch = 21, bg = "blue",
col = "blue", cex = 2, ylab = "", xlab = "",
cex.lab = 1.5, las = 1, lwd = 2, yaxt = "n", xaxt = "n")
box(lwd=2)
# Add minimal points
points(rel.fit.min$time.x, rel.fit.min$mean, pch = 21,
bg = "red", col = "red", lwd = 2, cex = 2)
# Add error bars
arrows(x0 = rel.fit.wt$time.x, y0 = rel.fit.wt$mean,
y1 = rel.fit.wt$mean + rel.fit.wt$sem,
angle = 90, length = 0.1, lwd = 2, col = "blue")
arrows(x0 = rel.fit.wt$time.x, y0 = rel.fit.wt$mean,
y1 = rel.fit.wt$mean - rel.fit.wt$sem,
angle = 90, length=0.1, lwd = 2, col = "blue")
arrows(x0 = rel.fit.min$time.x, y0 = rel.fit.min$mean,
y1 = rel.fit.min$mean + rel.fit.min$sem,
angle = 90, length = 0.1, lwd = 2, col = "red")
arrows(x0 = rel.fit.min$time.x, y0 = rel.fit.min$mean,
y1 = rel.fit.min$mean - rel.fit.min$sem,
angle = 90, length=0.1, lwd = 2, col = "red")
# Add axes and labels
axis(side = 2, lwd.ticks = 2, cex.axis = 1.25, las = 1,
labels = c("0.5", "1.0", "1.5"), at = c(0.5, 1, 1.5))
axis(side = 4, lwd.ticks = 2, cex.axis = 1.25, las = 1,
at=c(0.5, 1, 1.5), labels = F)
axis(side = 3, lwd.ticks = 2, cex.axis = 1.25, las = 1,
at = c(1, 3), labels = F)
axis(side = 1, lwd.ticks = 2, cex.axis = 1.25, las = 1,
labels = c("Ancestor", "ftsZ E315*"),
col.axis = "darkgray", at = c(1, 3))
mtext(expression('Time'), side = 1,
outer = TRUE, cex = 1.5, line = -3.5, adj = 0.45)
mtext(expression("Relative fitness ("~italic("W")~")"), side = 2,
outer = TRUE, cex = 1.5, line = -4, adj = 0.55)
# Add line segments
segments(rel.fit.wt$time.x[1], rel.fit.wt$mean[1], rel.fit.wt$time.x[2],
rel.fit.wt$mean[2], col = "blue", lwd = 2)
segments(rel.fit.min$time.x[1], rel.fit.min$mean[1], rel.fit.min$time.x[2],
rel.fit.min$mean[2], col = "red", lwd = 2)
# Add P-values
#mtext(expression("Timepoint:" ~italic("P")~"= 0.0003"), line = -2.5, cex = 0.80, at = 0.9)
#mtext(expression("Strain:" ~italic("P")~"< 0.0001"), line = -4.0, cex = 0.80, at = 0.75)
# Add strain identifier
text(3.8, rel.fit.wt$mean[2], labels = "Wildtype", cex = 1.0)
text(3.8, rel.fit.min$mean[2], labels = "Minimal", cex = 1.0)
# Close Plot Device
dev.off()
graphics.off()
# Show Plot
img <- readPNG("~\\..\\GitHub\\MinimalCell\\figures\\Fig2_ftsZ.png")
grid.raster(img)
rel.fit
# Subset data
rel.fit <- rel.fit.raw %>% group_by(strain, Mutation) %>% summarise(mean = mean(W_1.0), sem = sem(W_1.0))
# Set data as factors and rename levels
rel.fit$strain <- as.factor(rel.fit$strain)
levels(rel.fit$strain)[levels(rel.fit$strain)=="JCVI-syn1.0"] <- "Wildtype"
levels(rel.fit$strain)[levels(rel.fit$strain)=="JCVI-syn3B"] <- "Minimal"
rel.fit$strain <- factor(rel.fit$strain, levels=c("Wildtype","Minimal"))
# Add x-values for plotting
time.x <- c(1,3,1,3)
rel.fit <- data.frame(rel.fit, time.x)
# Subset relative fitness by strain
rel.fit.wt  <- filter(rel.fit, strain == "Wildtype") %>%
dplyr::select(Mutation, mean, sem, time.x)
rel.fit.min  <- filter(rel.fit, strain== "Minimal") %>%
dplyr::select(Mutation, mean, sem, time.x)
rel.fit
png(filename="~\\..\\GitHub\\MinimalCell\\figures\\Fig2_ftsZ.png",
width = 1200, height = 1200, res = 96*2)
plot.new()
par(mar = c(7, 7, 5, 7))
# Add wildtype points
plot(rel.fit.wt$time.x, rel.fit.wt$mean, xlim = c(0, 4.55),
ylim = c(0.25, 1.55), type = "p", pch = 21, bg = "blue",
col = "blue", cex = 2, ylab = "", xlab = "",
cex.lab = 1.5, las = 1, lwd = 2, yaxt = "n", xaxt = "n")
box(lwd=2)
# Add minimal points
points(rel.fit.min$time.x, rel.fit.min$mean, pch = 21,
bg = "red", col = "red", lwd = 2, cex = 2)
# Add error bars
arrows(x0 = rel.fit.wt$time.x, y0 = rel.fit.wt$mean,
y1 = rel.fit.wt$mean + rel.fit.wt$sem,
angle = 90, length = 0.1, lwd = 2, col = "blue")
arrows(x0 = rel.fit.wt$time.x, y0 = rel.fit.wt$mean,
y1 = rel.fit.wt$mean - rel.fit.wt$sem,
angle = 90, length=0.1, lwd = 2, col = "blue")
arrows(x0 = rel.fit.min$time.x, y0 = rel.fit.min$mean,
y1 = rel.fit.min$mean + rel.fit.min$sem,
angle = 90, length = 0.1, lwd = 2, col = "red")
arrows(x0 = rel.fit.min$time.x, y0 = rel.fit.min$mean,
y1 = rel.fit.min$mean - rel.fit.min$sem,
angle = 90, length=0.1, lwd = 2, col = "red")
# Add axes and labels
axis(side = 2, lwd.ticks = 2, cex.axis = 1.25, las = 1,
labels = c("0.5", "1.0", "1.5"), at = c(0.5, 1, 1.5))
axis(side = 4, lwd.ticks = 2, cex.axis = 1.25, las = 1,
at=c(0.5, 1, 1.5), labels = F)
axis(side = 3, lwd.ticks = 2, cex.axis = 1.25, las = 1,
at = c(1, 3), labels = F)
axis(side = 1, lwd.ticks = 2, cex.axis = 1.25, las = 1,
labels = c("Ancestor", "ftsZ E315*"),
col.axis = "darkgray", at = c(1, 3))
mtext(expression('Time'), side = 1,
outer = TRUE, cex = 1.5, line = -3.5, adj = 0.45)
mtext(expression("Relative fitness ("~italic("W")~")"), side = 2,
outer = TRUE, cex = 1.5, line = -4, adj = 0.55)
# Add line segments
segments(rel.fit.wt$time.x[1], rel.fit.wt$mean[1], rel.fit.wt$time.x[2],
rel.fit.wt$mean[2], col = "blue", lwd = 2)
segments(rel.fit.min$time.x[1], rel.fit.min$mean[1], rel.fit.min$time.x[2],
rel.fit.min$mean[2], col = "red", lwd = 2)
# Add P-values
#mtext(expression("Timepoint:" ~italic("P")~"= 0.0003"), line = -2.5, cex = 0.80, at = 0.9)
#mtext(expression("Strain:" ~italic("P")~"< 0.0001"), line = -4.0, cex = 0.80, at = 0.75)
# Add strain identifier
text(3.8, rel.fit.wt$mean[2], labels = "Wildtype", cex = 1.0)
text(3.8, rel.fit.min$mean[2], labels = "Minimal", cex = 1.0)
# Close Plot Device
dev.off()
graphics.off()
# Show Plot
img <- readPNG("~\\..\\GitHub\\MinimalCell\\figures\\Fig2_ftsZ.png")
grid.raster(img)
rel.fit
# Subset data
rel.fit <- rel.fit.raw %>% group_by(strain, Mutation) %>% summarise(mean = mean(W_1.0), sem = sem(W_1.0))
# Set data as factors and rename levels
rel.fit$strain <- as.factor(rel.fit$strain)
levels(rel.fit$strain)[levels(rel.fit$strain)=="JCVI-syn1.0"] <- "Wildtype"
levels(rel.fit$strain)[levels(rel.fit$strain)=="JCVI-syn3B"] <- "Minimal"
rel.fit$strain <- factor(rel.fit$strain, levels=c("Wildtype","Minimal"))
# Add x-values for plotting
time.x <- c(3,1,3,1)
rel.fit <- data.frame(rel.fit, time.x)
# Subset relative fitness by strain
rel.fit.wt  <- filter(rel.fit, strain == "Wildtype") %>%
dplyr::select(Mutation, mean, sem, time.x)
rel.fit.min  <- filter(rel.fit, strain== "Minimal") %>%
dplyr::select(Mutation, mean, sem, time.x)
png(filename="~\\..\\GitHub\\MinimalCell\\figures\\Fig2_ftsZ.png",
width = 1200, height = 1200, res = 96*2)
plot.new()
par(mar = c(7, 7, 5, 7))
# Add wildtype points
plot(rel.fit.wt$time.x, rel.fit.wt$mean, xlim = c(0, 4.55),
ylim = c(0.25, 1.55), type = "p", pch = 21, bg = "blue",
col = "blue", cex = 2, ylab = "", xlab = "",
cex.lab = 1.5, las = 1, lwd = 2, yaxt = "n", xaxt = "n")
box(lwd=2)
# Add minimal points
points(rel.fit.min$time.x, rel.fit.min$mean, pch = 21,
bg = "red", col = "red", lwd = 2, cex = 2)
# Add error bars
arrows(x0 = rel.fit.wt$time.x, y0 = rel.fit.wt$mean,
y1 = rel.fit.wt$mean + rel.fit.wt$sem,
angle = 90, length = 0.1, lwd = 2, col = "blue")
arrows(x0 = rel.fit.wt$time.x, y0 = rel.fit.wt$mean,
y1 = rel.fit.wt$mean - rel.fit.wt$sem,
angle = 90, length=0.1, lwd = 2, col = "blue")
arrows(x0 = rel.fit.min$time.x, y0 = rel.fit.min$mean,
y1 = rel.fit.min$mean + rel.fit.min$sem,
angle = 90, length = 0.1, lwd = 2, col = "red")
arrows(x0 = rel.fit.min$time.x, y0 = rel.fit.min$mean,
y1 = rel.fit.min$mean - rel.fit.min$sem,
angle = 90, length=0.1, lwd = 2, col = "red")
# Add axes and labels
axis(side = 2, lwd.ticks = 2, cex.axis = 1.25, las = 1,
labels = c("0.5", "1.0", "1.5"), at = c(0.5, 1, 1.5))
axis(side = 4, lwd.ticks = 2, cex.axis = 1.25, las = 1,
at=c(0.5, 1, 1.5), labels = F)
axis(side = 3, lwd.ticks = 2, cex.axis = 1.25, las = 1,
at = c(1, 3), labels = F)
axis(side = 1, lwd.ticks = 2, cex.axis = 1.25, las = 1,
labels = c("Ancestor", "ftsZ E315*"),
col.axis = "darkgray", at = c(1, 3))
mtext(expression('Time'), side = 1,
outer = TRUE, cex = 1.5, line = -3.5, adj = 0.45)
mtext(expression("Relative fitness ("~italic("W")~")"), side = 2,
outer = TRUE, cex = 1.5, line = -4, adj = 0.55)
# Add line segments
segments(rel.fit.wt$time.x[1], rel.fit.wt$mean[1], rel.fit.wt$time.x[2],
rel.fit.wt$mean[2], col = "blue", lwd = 2)
segments(rel.fit.min$time.x[1], rel.fit.min$mean[1], rel.fit.min$time.x[2],
rel.fit.min$mean[2], col = "red", lwd = 2)
# Add P-values
#mtext(expression("Timepoint:" ~italic("P")~"= 0.0003"), line = -2.5, cex = 0.80, at = 0.9)
#mtext(expression("Strain:" ~italic("P")~"< 0.0001"), line = -4.0, cex = 0.80, at = 0.75)
# Add strain identifier
text(3.8, rel.fit.wt$mean[2], labels = "Wildtype", cex = 1.0)
text(3.8, rel.fit.min$mean[2], labels = "Minimal", cex = 1.0)
# Close Plot Device
dev.off()
graphics.off()
# Show Plot
img <- readPNG("~\\..\\GitHub\\MinimalCell\\figures\\Fig2_ftsZ.png")
grid.raster(img)
png(filename="~\\..\\GitHub\\MinimalCell\\figures\\Fig2_ftsZ.png",
width = 1200, height = 1200, res = 96*2)
plot.new()
par(mar = c(7, 7, 5, 7))
# Add wildtype points
plot(rel.fit.wt$time.x, rel.fit.wt$mean, xlim = c(0, 4.55),
ylim = c(0.25, 1.55), type = "p", pch = 21, bg = "blue",
col = "blue", cex = 2, ylab = "", xlab = "",
cex.lab = 1.5, las = 1, lwd = 2, yaxt = "n", xaxt = "n")
box(lwd=2)
# Add minimal points
points(rel.fit.min$time.x, rel.fit.min$mean, pch = 21,
bg = "red", col = "red", lwd = 2, cex = 2)
# Add error bars
arrows(x0 = rel.fit.wt$time.x, y0 = rel.fit.wt$mean,
y1 = rel.fit.wt$mean + rel.fit.wt$sem,
angle = 90, length = 0.1, lwd = 2, col = "blue")
arrows(x0 = rel.fit.wt$time.x, y0 = rel.fit.wt$mean,
y1 = rel.fit.wt$mean - rel.fit.wt$sem,
angle = 90, length=0.1, lwd = 2, col = "blue")
arrows(x0 = rel.fit.min$time.x, y0 = rel.fit.min$mean,
y1 = rel.fit.min$mean + rel.fit.min$sem,
angle = 90, length = 0.1, lwd = 2, col = "red")
arrows(x0 = rel.fit.min$time.x, y0 = rel.fit.min$mean,
y1 = rel.fit.min$mean - rel.fit.min$sem,
angle = 90, length=0.1, lwd = 2, col = "red")
# Add axes and labels
axis(side = 2, lwd.ticks = 2, cex.axis = 1.25, las = 1,
labels = c("0.5", "1.0", "1.5"), at = c(0.5, 1, 1.5))
axis(side = 4, lwd.ticks = 2, cex.axis = 1.25, las = 1,
at=c(0.5, 1, 1.5), labels = F)
axis(side = 3, lwd.ticks = 2, cex.axis = 1.25, las = 1,
at = c(1, 3), labels = F)
axis(side = 1, lwd.ticks = 2, cex.axis = 1.25, las = 1,
labels = c("Ancestor", "ftsZ E315*"),
col.axis = "darkgray", at = c(1, 3))
mtext(expression('Time'), side = 1,
outer = TRUE, cex = 1.5, line = -3.5, adj = 0.45)
mtext(expression("Relative fitness ("~italic("W")~")"), side = 2,
outer = TRUE, cex = 1.5, line = -4, adj = 0.55)
# Add line segments
segments(rel.fit.wt$time.x[1], rel.fit.wt$mean[1], rel.fit.wt$time.x[2],
rel.fit.wt$mean[2], col = "blue", lwd = 2)
segments(rel.fit.min$time.x[1], rel.fit.min$mean[1], rel.fit.min$time.x[2],
rel.fit.min$mean[2], col = "red", lwd = 2)
# Add P-values
#mtext(expression("Timepoint:" ~italic("P")~"= 0.0003"), line = -2.5, cex = 0.80, at = 0.9)
#mtext(expression("Strain:" ~italic("P")~"< 0.0001"), line = -4.0, cex = 0.80, at = 0.75)
# Add strain identifier
text(3.8, rel.fit.wt$mean[1], labels = "Wildtype", cex = 1.0)
text(3.8, rel.fit.min$mean[1], labels = "Minimal", cex = 1.0)
# Close Plot Device
dev.off()
graphics.off()
# Show Plot
img <- readPNG("~\\..\\GitHub\\MinimalCell\\figures\\Fig2_ftsZ.png")
grid.raster(img)
