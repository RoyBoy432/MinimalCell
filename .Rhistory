summarize(mean.diam = mean(diameter))
s1_anc.reps <- filter(size.raw, sub.strain == "s1_anc")
B_anc.reps <- filter(size.raw, sub.strain == "B_anc")
s1_anc.reps
print(c(s1_anc.reps$sub.strain))
mean(s1_anc.reps$diameter)
2*sem(s1_anc.reps$diameter)
mean(B_anc.reps$diameter)
2*sem(B_anc.reps$diameter)
equal.var.anc <- var.test(s1_anc.reps$diameter, B_anc.reps$diameter)
anc.t.test <- t.test(x = s1_anc.reps$diameter, B_anc.reps$diameter, alternative = "two.sided", var.equal = TRUE, mu = 0)
var.test(s1_anc.reps$diameter, B_anc.reps$diameter)
t.test(x = s1_anc.reps$diameter, B_anc.reps$diameter, alternative = "two.sided", var.equal = TRUE, mu = 0)
t.test(x = s1_anc.reps$diameter, B_anc.reps$diameter, alternative = "two.sided", var.equal = TRUE, mu = 0)
B_anc.reps
s1_anc.reps
t.test(x = s1_anc.reps$diameter, B_anc.reps$diameter, alternative = "two.sided", var.equal = TRUE, mu = 0)
# Difference in cell size between wildtype ancestor and wildtype evolved lines?
s1_delta.t.test <- t.test(x = evo.reps$mean.diam[5:8], mu = size.reps$mean.diam[2], alternative = 'two.sided')
s1_ftsZ.reps <- filter(size.raw, sub.strain == "s1_ftsZ")
B_ftsZ.reps <- filter(size.raw, sub.strain == "B_ftsZ")
equal.var.s1.ftsZ <- var.test(s1_anc.reps$diameter, s1_ftsZ.reps$diameter)
s1.ftsZ.t.test <- t.test(x = s1_anc.reps$diameter, s1_ftsZ.reps$diameter, alternative = "less", var.equal = TRUE, mu = 0)
equal.var.B.ftsZ <- var.test(B_anc.reps$diameter, B_ftsZ.reps$diameter)
B.ftsZ.t.test <- t.test(x = B_anc.reps$diameter, B_ftsZ.reps$diameter, alternative = "two.sided", var.equal = FALSE, mu = 0)
evo.reps <- filter(size.reps, timepoint == "Evolved") %>%
group_by(strain, sub.strain)
equal.var.evo <- var.test(evo.reps$mean.diam[1:4], evo.reps$mean.diam[5:8])
evo.t.test <- t.test(evo.reps$mean.diam ~ evo.reps$strain, var.equal = T)
# Difference in cell size between wildtype ancestor and wildtype evolved lines?
s1_delta.t.test <- t.test(x = evo.reps$mean.diam[5:8], mu = size.reps$mean.diam[2], alternative = 'two.sided')
# Difference in cell size between minimal ancestor and minimal evolved lines?
B_delta.t.test <- t.test(x = evo.reps$mean.diam[1:4], mu = size.reps$mean.diam[1], alternative = 't')
t.test(x = evo.reps$mean.diam[5:8], mu = size.reps$mean.diam[2], alternative = 'two.sided')
0.7922316/.439
2*sem(evo.reps$mean.diam[5:8])
t.test(x = evo.reps$mean.diam[1:4], mu = size.reps$mean.diam[1], alternative = 't')
2*sem(evo.reps$mean.diam[1:4])
var.test(s1_anc.reps$diameter, s1_ftsZ.reps$diameter)
t.test(x = s1_anc.reps$diameter, s1_ftsZ.reps$diameter, alternative = "less", var.equal = TRUE, mu = 0)
var.test(B_anc.reps$diameter, B_ftsZ.reps$diameter)
t.test(x = B_anc.reps$diameter, B_ftsZ.reps$diameter, alternative = "two.sided", var.equal = FALSE, mu = 0)
2*sem(B_ftsZ.reps$diameter)
2*sem(s1_ftsZ.reps$diameter)
mean(s1_ftsZ.reps$diameter)
var.test(evo.reps$mean.diam[1:4], evo.reps$mean.diam[5:8])
1/0.07348194
rm(list=ls())
require("knitr")
getwd()
setwd("~/GitHub/MinimalCell")
require("png")
require("dplyr")
require("grid")
sem <- function(x) sqrt(var(x)/length(x))
size.raw <-read.csv("~\\..\\GitHub\\MinimalCell\\data\\SEM_Stein_data\\SEM_Stein_cases.csv")
size.raw_no.mutant <-read.csv("~\\..\\GitHub\\MinimalCell\\data\\SEM_Stein_data\\SEM_Stein_cases_no.mutant.csv")
#size.raw <-read.csv("~\\..\\GitHub\\MinimalCell\\data\\SEM_Stein_data\\SEM_Stein_cases.csv")
#size.raw_no.mutant <-read.csv("~\\..\\GitHub\\MinimalCell\\data\\SEM_Stein_data\\SEM_Stein_cases_no.mutant.csv")
size.raw <- as_tibble(size.raw)
colnames(size.raw) <- c("strain", "timepoint", "sub.strain", "diameter")
colnames(size.raw_no.mutant) <- c("strain", "timepoint", "sub.strain", "diameter")
#size <- size.raw %>% group_by(strain, timepoint) %>% summarise(mean = mean(diameter), sem = sem(diameter))
size <- size.raw_no.mutant %>% group_by(strain, timepoint) %>% summarise(mean = mean(diameter), sem = sem(diameter))
size$strain <- as.factor(size$strain)
size$timepoint <- as.factor(size$timepoint)
# Add x-values for plotting
time.x <- c(1,3,1,3)
size <- data.frame(size, time.x)
# Subset relative fitness by strain
# Note, this code generates the mean and SEM for evolved lines incorrectly. It pools the mean and the SEM across all measured individual cells, rather than taking the mean of the 4 evolutionary replicates and the SEM of the 4 evolutionary replicates. In the code to generate the figure, I altered the size.wt and size.min dataframes to have the correct means and SEMs for plotting.
size.wt  <- filter(size, strain == "Wildtype") %>%
dplyr::select(timepoint, mean, sem, time.x)
size.min  <- filter(size, strain== "Minimal") %>%
dplyr::select(timepoint, mean, sem, time.x)
size.min  <- filter(size, strain== "Minimal") %>%
dplyr::select(timepoint, mean, sem, time.x)
## Tests significance
```{r}
# Subset data
size.reps <- size.raw %>%
dplyr::select(strain, timepoint, sub.strain, diameter) %>%
group_by(timepoint, strain, sub.strain) %>%
summarize(mean.diam = mean(diameter))
s1_anc.reps <- filter(size.raw, sub.strain == "s1_anc")
B_anc.reps <- filter(size.raw, sub.strain == "B_anc")
equal.var.anc <- var.test(s1_anc.reps$diameter, B_anc.reps$diameter)
anc.t.test <- t.test(x = s1_anc.reps$diameter, B_anc.reps$diameter, alternative = "two.sided", var.equal = TRUE, mu = 0)
s1_ftsZ.reps <- filter(size.raw, sub.strain == "s1_ftsZ")
B_ftsZ.reps <- filter(size.raw, sub.strain == "B_ftsZ")
equal.var.s1.ftsZ <- var.test(s1_anc.reps$diameter, s1_ftsZ.reps$diameter)
s1.ftsZ.t.test <- t.test(x = s1_anc.reps$diameter, s1_ftsZ.reps$diameter, alternative = "less", var.equal = TRUE, mu = 0)
equal.var.B.ftsZ <- var.test(B_anc.reps$diameter, B_ftsZ.reps$diameter)
B.ftsZ.t.test <- t.test(x = B_anc.reps$diameter, B_ftsZ.reps$diameter, alternative = "two.sided", var.equal = FALSE, mu = 0)
evo.reps <- filter(size.reps, timepoint == "Evolved") %>%
group_by(strain, sub.strain)
equal.var.evo <- var.test(evo.reps$mean.diam[1:4], evo.reps$mean.diam[5:8])
evo.t.test <- t.test(evo.reps$mean.diam ~ evo.reps$strain, var.equal = T)
# Difference in cell size between wildtype ancestor and wildtype evolved lines?
s1_delta.t.test <- t.test(x = evo.reps$mean.diam[5:8], mu = size.reps$mean.diam[2], alternative = 'two.sided')
# Difference in cell size between minimal ancestor and minimal evolved lines?
B_delta.t.test <- t.test(x = evo.reps$mean.diam[1:4], mu = size.reps$mean.diam[1], alternative = 't')
equal.var.s1.ftsZ
equal.var.evo <- var.test(evo.reps$mean.diam[1:4], evo.reps$mean.diam[5:8])
equal.var.B.ftsZ <- var.test(B_anc.reps$diameter, B_ftsZ.reps$diameter)
B.ftsZ.t.test <- t.test(x = B_anc.reps$diameter, B_ftsZ.reps$diameter, alternative = "two.sided", var.equal = FALSE, mu = 0)
equal.var.B.ftsZ
size.wt.ftsZ <- size.wt
size.wt.ftsZ$timepoint <- as.character(size.wt.ftsZ$timepoint)
size.wt.ftsZ$timepoint[2] <- "ftsZ E315*"
size.wt.ftsZ$timepoint <- factor(size.wt.ftsZ$timepoint)
size.wt.ftsZ$mean[2] <- mean(s1_ftsZ.reps$diameter)
size.wt.ftsZ$sem[2] <- sem(s1_ftsZ.reps$diameter)
size.min.ftsZ <- size.min
size.min.ftsZ$timepoint <- as.character(size.min.ftsZ$timepoint)
size.min.ftsZ$timepoint[2] <- "ftsZ E315*"
size.min.ftsZ$timepoint <- factor(size.min.ftsZ$timepoint)
size.min.ftsZ$mean[2] <- mean(B_ftsZ.reps$diameter)
size.min.ftsZ$sem[2] <- sem(B_ftsZ.reps$diameter)
png(filename="~\\..\\GitHub\\MinimalCell\\figures\\Fig4_ftsZ_SEM.png",
width = 1200, height = 1200, res = 96*2)
plot.new()
par(mar = c(7, 7, 5, 7))
# Add wildtype points
plot(size.wt.ftsZ$time.x, size.wt.ftsZ$mean, xlim = c(0, 4.55),
ylim = c(0.0, 1.1), type = "p", pch = 21, bg = "blue",
col = "blue", cex = 2, ylab = "", xlab = "",
cex.lab = 1.5, las = 1, lwd = 2, yaxt = "n", xaxt = "n")
box(lwd=2)
# Add minimal points
points(size.min.ftsZ$time.x, size.min.ftsZ$mean, pch = 21,
bg = "red", col = "red", lwd = 2, cex = 2)
# Add error bars
arrows(x0 = size.wt.ftsZ$time.x, y0 = size.wt.ftsZ$mean,
y1 = size.wt.ftsZ$mean + 2*size.wt.ftsZ$sem,
angle = 90, length = 0.1, lwd = 2, col = "blue")
arrows(x0 = size.wt.ftsZ$time.x, y0 = size.wt.ftsZ$mean,
y1 = size.wt.ftsZ$mean - 2*size.wt.ftsZ$sem,
angle = 90, length=0.1, lwd = 2, col = "blue")
arrows(x0 = size.min.ftsZ$time.x, y0 = size.min.ftsZ$mean,
y1 = size.min.ftsZ$mean + 2*size.min.ftsZ$sem,
angle = 90, length = 0.1, lwd = 2, col = "red")
arrows(x0 = size.min.ftsZ$time.x, y0 = size.min.ftsZ$mean,
y1 = size.min.ftsZ$mean - 2*size.min.ftsZ$sem,
angle = 90, length=0.1, lwd = 2, col = "red")
# Add axes and labels
axis(side = 2, lwd.ticks = 2, cex.axis = 1.25, las = 1,
labels = c("0.00", "0.25", "0.50", "0.75", "1.00"), at = c(0, 0.25, 0.5, 0.75, 1.00))
axis(side = 4, lwd.ticks = 2, cex.axis = 1.25, las = 1,
at=c(0, 0.25, 0.5, 0.75, 1.00), labels = F)
axis(side = 3, lwd.ticks = 2, cex.axis = 1.25, las = 1,
at = c(1, 3), labels = F)
axis(side = 1, lwd.ticks = 2, cex.axis = 1.25, las = 1,
labels = c("Ancestor", "ftsZ E315*"),
col.axis = "darkgray", at = c(1, 3))
mtext(expression('Timepoint'), side = 1,
outer = TRUE, cex = 1.5, line = -3.5, adj = 0.45)
mtext(expression(paste("Cell diameter (",mu, "m)")), side = 2,
outer = TRUE, cex = 1.5, line = -3, adj = 0.55)
# Add line segments
segments(size.wt.ftsZ$time.x[1], size.wt.ftsZ$mean[1], size.wt.ftsZ$time.x[2],
size.wt.ftsZ$mean[2], col = "blue", lwd = 2)
segments(size.min.ftsZ$time.x[1], size.min.ftsZ$mean[1], size.min.ftsZ$time.x[2],
size.min.ftsZ$mean[2], col = "red", lwd = 2)
# Add P-values
#mtext(expression("Timepoint x Strain:"), line = -2.5, cex = 0.8, at = 0.9)
#mtext(expression(~italic("P")~"< 0.0001"), line = -3.5, cex = 0.8, at = 0.9)
# Add strain identifier
text(3.8, size.wt.ftsZ$mean[2], labels = "Wildtype", cex = 1.0)
text(3.8, size.min.ftsZ$mean[2], labels = "Minimal", cex = 1.0)
# Close Plot Device
dev.off()
graphics.off()
# Show Plot
img <- readPNG("~\\..\\GitHub\\MinimalCell\\figures\\Fig4_ftsZ_SEM.png")
grid.raster(img)
size.wt.ftsZ <- size.wt
size.wt.ftsZ$timepoint <- as.character(size.wt.ftsZ$timepoint)
size.wt.ftsZ$timepoint[2] <- "ftsZ E315*"
size.wt.ftsZ$timepoint <- factor(size.wt.ftsZ$timepoint)
size.wt.ftsZ$mean[2] <- mean(s1_ftsZ.reps$diameter)
size.wt.ftsZ$sem[2] <- sem(s1_ftsZ.reps$diameter)
size.min.ftsZ <- size.min
size.min.ftsZ$timepoint <- as.character(size.min.ftsZ$timepoint)
size.min.ftsZ$timepoint[2] <- "ftsZ E315*"
size.min.ftsZ$timepoint <- factor(size.min.ftsZ$timepoint)
size.min.ftsZ$mean[2] <- mean(B_ftsZ.reps$diameter)
size.min.ftsZ$sem[2] <- sem(B_ftsZ.reps$diameter)
png(filename="~\\..\\GitHub\\MinimalCell\\figures\\Fig4_ftsZ_SEM_axis.85.png",
width = 1200, height = 1200, res = 96*2)
plot.new()
par(mar = c(7, 7, 5, 7))
# Add wildtype points
plot(size.wt.ftsZ$time.x, size.wt.ftsZ$mean, xlim = c(0, 4.55),
ylim = c(0.0, .85), type = "p", pch = 21, bg = "blue",
col = "blue", cex = 2, ylab = "", xlab = "",
cex.lab = 1.5, las = 1, lwd = 2, yaxt = "n", xaxt = "n")
box(lwd=2)
# Add minimal points
points(size.min.ftsZ$time.x, size.min.ftsZ$mean, pch = 21,
bg = "red", col = "red", lwd = 2, cex = 2)
# Add error bars
arrows(x0 = size.wt.ftsZ$time.x, y0 = size.wt.ftsZ$mean,
y1 = size.wt.ftsZ$mean + 2*size.wt.ftsZ$sem,
angle = 90, length = 0.1, lwd = 2, col = "blue")
arrows(x0 = size.wt.ftsZ$time.x, y0 = size.wt.ftsZ$mean,
y1 = size.wt.ftsZ$mean - 2*size.wt.ftsZ$sem,
angle = 90, length=0.1, lwd = 2, col = "blue")
arrows(x0 = size.min.ftsZ$time.x, y0 = size.min.ftsZ$mean,
y1 = size.min.ftsZ$mean + 2*size.min.ftsZ$sem,
angle = 90, length = 0.1, lwd = 2, col = "red")
arrows(x0 = size.min.ftsZ$time.x, y0 = size.min.ftsZ$mean,
y1 = size.min.ftsZ$mean - 2*size.min.ftsZ$sem,
angle = 90, length=0.1, lwd = 2, col = "red")
# Add axes and labels
axis(side = 2, lwd.ticks = 2, cex.axis = 1.25, las = 1,
labels = c("0.00", "0.25", "0.50", "0.75"), at = c(0, 0.25, 0.5, 0.75, 1.00))
size.wt.ftsZ <- size.wt
size.wt.ftsZ$timepoint <- as.character(size.wt.ftsZ$timepoint)
size.wt.ftsZ$timepoint[2] <- "ftsZ E315*"
size.wt.ftsZ$timepoint <- factor(size.wt.ftsZ$timepoint)
size.wt.ftsZ$mean[2] <- mean(s1_ftsZ.reps$diameter)
size.wt.ftsZ$sem[2] <- sem(s1_ftsZ.reps$diameter)
size.min.ftsZ <- size.min
size.min.ftsZ$timepoint <- as.character(size.min.ftsZ$timepoint)
size.min.ftsZ$timepoint[2] <- "ftsZ E315*"
size.min.ftsZ$timepoint <- factor(size.min.ftsZ$timepoint)
size.min.ftsZ$mean[2] <- mean(B_ftsZ.reps$diameter)
size.min.ftsZ$sem[2] <- sem(B_ftsZ.reps$diameter)
png(filename="~\\..\\GitHub\\MinimalCell\\figures\\Fig4_ftsZ_SEM_axis.85.png",
width = 1200, height = 1200, res = 96*2)
plot.new()
par(mar = c(7, 7, 5, 7))
# Add wildtype points
plot(size.wt.ftsZ$time.x, size.wt.ftsZ$mean, xlim = c(0, 4.55),
ylim = c(0.0, .85), type = "p", pch = 21, bg = "blue",
col = "blue", cex = 2, ylab = "", xlab = "",
cex.lab = 1.5, las = 1, lwd = 2, yaxt = "n", xaxt = "n")
box(lwd=2)
# Add minimal points
points(size.min.ftsZ$time.x, size.min.ftsZ$mean, pch = 21,
bg = "red", col = "red", lwd = 2, cex = 2)
# Add error bars
arrows(x0 = size.wt.ftsZ$time.x, y0 = size.wt.ftsZ$mean,
y1 = size.wt.ftsZ$mean + 2*size.wt.ftsZ$sem,
angle = 90, length = 0.1, lwd = 2, col = "blue")
arrows(x0 = size.wt.ftsZ$time.x, y0 = size.wt.ftsZ$mean,
y1 = size.wt.ftsZ$mean - 2*size.wt.ftsZ$sem,
angle = 90, length=0.1, lwd = 2, col = "blue")
arrows(x0 = size.min.ftsZ$time.x, y0 = size.min.ftsZ$mean,
y1 = size.min.ftsZ$mean + 2*size.min.ftsZ$sem,
angle = 90, length = 0.1, lwd = 2, col = "red")
arrows(x0 = size.min.ftsZ$time.x, y0 = size.min.ftsZ$mean,
y1 = size.min.ftsZ$mean - 2*size.min.ftsZ$sem,
angle = 90, length=0.1, lwd = 2, col = "red")
# Add axes and labels
axis(side = 2, lwd.ticks = 2, cex.axis = 1.25, las = 1,
labels = c("0.00", "0.25", "0.50", "0.75"), at = c(0, 0.25, 0.5, 0.75))
axis(side = 4, lwd.ticks = 2, cex.axis = 1.25, las = 1,
at=c(0, 0.25, 0.5, 0.75), labels = F)
axis(side = 3, lwd.ticks = 2, cex.axis = 1.25, las = 1,
at = c(1, 3), labels = F)
axis(side = 1, lwd.ticks = 2, cex.axis = 1.25, las = 1,
labels = c("Ancestor", "ftsZ E315*"),
col.axis = "darkgray", at = c(1, 3))
mtext(expression('Timepoint'), side = 1,
outer = TRUE, cex = 1.5, line = -3.5, adj = 0.45)
mtext(expression(paste("Cell diameter (",mu, "m)")), side = 2,
outer = TRUE, cex = 1.5, line = -3, adj = 0.55)
# Add line segments
segments(size.wt.ftsZ$time.x[1], size.wt.ftsZ$mean[1], size.wt.ftsZ$time.x[2],
size.wt.ftsZ$mean[2], col = "blue", lwd = 2)
segments(size.min.ftsZ$time.x[1], size.min.ftsZ$mean[1], size.min.ftsZ$time.x[2],
size.min.ftsZ$mean[2], col = "red", lwd = 2)
# Add P-values
#mtext(expression("Timepoint x Strain:"), line = -2.5, cex = 0.8, at = 0.9)
#mtext(expression(~italic("P")~"< 0.0001"), line = -3.5, cex = 0.8, at = 0.9)
# Add strain identifier
text(3.8, size.wt.ftsZ$mean[2], labels = "Wildtype", cex = 1.0)
text(3.8, size.min.ftsZ$mean[2], labels = "Minimal", cex = 1.0)
# Close Plot Device
dev.off()
graphics.off()
# Show Plot
img <- readPNG("~\\..\\GitHub\\MinimalCell\\figures\\Fig4_ftsZ_SEM_axis.85.png")
grid.raster(img)
size.wt.ftsZ <- size.wt
size.wt.ftsZ$timepoint <- as.character(size.wt.ftsZ$timepoint)
size.wt.ftsZ$timepoint[2] <- "ftsZ E315*"
size.wt.ftsZ$timepoint <- factor(size.wt.ftsZ$timepoint)
size.wt.ftsZ$mean[2] <- mean(s1_ftsZ.reps$diameter)
size.wt.ftsZ$sem[2] <- sem(s1_ftsZ.reps$diameter)
size.min.ftsZ <- size.min
size.min.ftsZ$timepoint <- as.character(size.min.ftsZ$timepoint)
size.min.ftsZ$timepoint[2] <- "ftsZ E315*"
size.min.ftsZ$timepoint <- factor(size.min.ftsZ$timepoint)
size.min.ftsZ$mean[2] <- mean(B_ftsZ.reps$diameter)
size.min.ftsZ$sem[2] <- sem(B_ftsZ.reps$diameter)
png(filename="~\\..\\GitHub\\MinimalCell\\figures\\Fig4_ftsZ_SEM_axis.70.png",
width = 1200, height = 1200, res = 96*2)
plot.new()
par(mar = c(7, 7, 5, 7))
# Add wildtype points
plot(size.wt.ftsZ$time.x, size.wt.ftsZ$mean, xlim = c(0, 4.55),
ylim = c(0.0, .7), type = "p", pch = 21, bg = "blue",
col = "blue", cex = 2, ylab = "", xlab = "",
cex.lab = 1.5, las = 1, lwd = 2, yaxt = "n", xaxt = "n")
box(lwd=2)
# Add minimal points
points(size.min.ftsZ$time.x, size.min.ftsZ$mean, pch = 21,
bg = "red", col = "red", lwd = 2, cex = 2)
# Add error bars
arrows(x0 = size.wt.ftsZ$time.x, y0 = size.wt.ftsZ$mean,
y1 = size.wt.ftsZ$mean + 2*size.wt.ftsZ$sem,
angle = 90, length = 0.1, lwd = 2, col = "blue")
arrows(x0 = size.wt.ftsZ$time.x, y0 = size.wt.ftsZ$mean,
y1 = size.wt.ftsZ$mean - 2*size.wt.ftsZ$sem,
angle = 90, length=0.1, lwd = 2, col = "blue")
arrows(x0 = size.min.ftsZ$time.x, y0 = size.min.ftsZ$mean,
y1 = size.min.ftsZ$mean + 2*size.min.ftsZ$sem,
angle = 90, length = 0.1, lwd = 2, col = "red")
arrows(x0 = size.min.ftsZ$time.x, y0 = size.min.ftsZ$mean,
y1 = size.min.ftsZ$mean - 2*size.min.ftsZ$sem,
angle = 90, length=0.1, lwd = 2, col = "red")
# Add axes and labels
axis(side = 2, lwd.ticks = 2, cex.axis = 1.25, las = 1,
labels = c("0.00", "0.20", "0.40", "0.60"), at = c(0, 0.20, 0.4, 0.60))
axis(side = 4, lwd.ticks = 2, cex.axis = 1.25, las = 1,
at=c(0, 0.20, 0.4, 0.60), labels = F)
axis(side = 3, lwd.ticks = 2, cex.axis = 1.25, las = 1,
at = c(1, 3), labels = F)
axis(side = 1, lwd.ticks = 2, cex.axis = 1.25, las = 1,
labels = c("Ancestor", "ftsZ E315*"),
col.axis = "darkgray", at = c(1, 3))
mtext(expression('Timepoint'), side = 1,
outer = TRUE, cex = 1.5, line = -3.5, adj = 0.45)
mtext(expression(paste("Cell diameter (",mu, "m)")), side = 2,
outer = TRUE, cex = 1.5, line = -3, adj = 0.55)
# Add line segments
segments(size.wt.ftsZ$time.x[1], size.wt.ftsZ$mean[1], size.wt.ftsZ$time.x[2],
size.wt.ftsZ$mean[2], col = "blue", lwd = 2)
segments(size.min.ftsZ$time.x[1], size.min.ftsZ$mean[1], size.min.ftsZ$time.x[2],
size.min.ftsZ$mean[2], col = "red", lwd = 2)
# Add P-values
#mtext(expression("Timepoint x Strain:"), line = -2.5, cex = 0.8, at = 0.9)
#mtext(expression(~italic("P")~"< 0.0001"), line = -3.5, cex = 0.8, at = 0.9)
# Add strain identifier
text(3.8, size.wt.ftsZ$mean[2], labels = "Wildtype", cex = 1.0)
text(3.8, size.min.ftsZ$mean[2], labels = "Minimal", cex = 1.0)
# Close Plot Device
dev.off()
graphics.off()
# Show Plot
img <- readPNG("~\\..\\GitHub\\MinimalCell\\figures\\Fig4_ftsZ_SEM_axis.70.png")
grid.raster(img)
rm(list=ls())
require("knitr")
getwd()
setwd("~/GitHub/MinimalCell")
require("png")
require("dplyr")
require("vioplot")
require("grid")
######Various statistical tests to evaluate mutation spectrum
setwd("~\\..\\GitHub\\MinimalCell")
setwd("~\\..\\GitHub\\MinimalCell")
setwd("~\\..\\GitHub\\MinimalCell")
myALL<-read_csv("data\\MA\\MA_summary_for_R.csv")
require("png")
require("dplyr")
require("vioplot")
require("grid")
install.packages("vioplot")
require(vioplot)
myALL<-read_csv("data\\MA\\MA_summary_for_R.csv")
require(dplyr)
myALL<-read_csv("data\\MA\\MA_summary_for_R.csv")
myALL<-read.csv("data\\MA\\MA_summary_for_R.csv")
myALL<-read.csv("~\\..\\GitHub\\MinimalCell\\data\\MA\\MA_summary_for_R.csv")
my3B<-read.csv("~\\..\\GitHub\\MinimalCell\\data\\MA\\MA_3B_summary_for_R.csv")
mys1<-read.csv("~\\..\\GitHub\\MinimalCell\\data\\MA\\MA_s1_summary_for_R.csv")
MAALL<-as_tibble(myALL)
MA3B<-as_tibble(my3B)
MAs1<-as_tibble(mys1)
MAALL$strain <- as.factor(MAALL$strain)
levels(MAALL$strain)[levels(MAALL$strain)=="MA_s1"] <- "Wildtype"
levels(MAALL$strain)[levels(MAALL$strain)=="MA_3B"] <- "Minimal"
MAALL$strain <- factor(MAALL$strain, levels=c("Wildtype","Minimal"))
926310/1078809
#For each strain, look at the total number of CDS SNMs and non-CDS SNMs. Do they occur in proportions significantly different from the null expectation?
x6s1<-sum(MAs1$in_CDS)
n6s1<-sum(MAs1$in_CDS)+sum(MAs1$not_in_CDS)
CDSprops1 <- prop.test(x = x6s1, n = n6s1, p = (926310/1078809), alternative = 'two.sided');CDSprops1
x63B<-sum(MA3B$in_CDS)
n63B<-sum(MA3B$in_CDS)+sum(MA3B$not_in_CDS)
CDSprops1 <- prop.test(x = x63B, n = n63B, p = (479721/543379), alternative = 'two.sided');CDSprops1
rm(list=ls())
getwd()
setwd("~/GitHub/MinimalCell")
require("png")
require("dplyr")
require("grid")
require("vegan")
require("indicspecies")
g.essent.raw <- read.csv("~\\..\\GitHub\\MinimalCell\\data2\\GxP_Mm_essential.csv")
g.essent.raw$sample <- as.factor(g.essent.raw$sample)
g.essent.raw$treatment <- as.factor(g.essent.raw$treatment)
levels(g.essent.raw$treatment)[levels(g.essent.raw$treatment)=="s1"] <- "Wildtype"
levels(g.essent.raw$treatment)[levels(g.essent.raw$treatment)=="s3"] <- "Minimal"
g.essent <- as_tibble(g.essent.raw)
g.essent <- as.matrix(g.essent[,3:ncol(g.essent)])
g.essent.adonis <- adonis(g.essent ~ g.essent.raw$treatment, method = "bray", permutations = 9999)
#            Df SumsOfSqs MeanSqs  F.Model  R2        Pr(>F)
# strain     1   0.95301  0.95301  4.1217   0.40721   0.029 *
# Residuals  6   1.38731  0.23122           0.59279
# Total      7   2.34032                    1.00000
# (same qualitative result with jaccard, canberra, gower, horn, and Kulczynski)
# Principal Coordinates Analysis (PCoA)
```{r}
# Create a distance matrix
g.essent.dist <- vegdist(g.essent, method = 'bray', upper = TRUE, diag = TRUE)
g.essent.dist <- as_tibble(data.matrix(g.essent.dist))
# Run PCoA and quantify explained variance
pcoa.eig <- cmdscale(g.essent.dist, eig = TRUE, k = 3)
explainvar1 <- round(pcoa.eig$eig[1] / sum(pcoa.eig$eig), 3) * 100 # 42.1 %
explainvar2 <- round(pcoa.eig$eig[2] / sum(pcoa.eig$eig), 3) * 100 # 16.5 %
explainvar3 <- round(pcoa.eig$eig[3] / sum(pcoa.eig$eig), 3) * 100 # 15.1 %
sum.eig <- sum(explainvar1, explainvar2, explainvar3) # 73 %
# Add sample and treatment IDs
g.essent.pcoa <- as.data.frame(pcoa.eig[1])
g.essent.pcoa$treatment <- g.essent.raw$treatment
row.names(g.essent.pcoa) <- g.essent.raw$sample
g.essent.pcoa$sample <- g.essent.raw$sample
names(g.essent.pcoa)[1:3] <- c('PC1', 'PC2', 'PC3')
gd <- vegdist(g.essent, method = 'bray', upper = TRUE, diag = TRUE)
compare.variance <- betadisper(d=gd, group = c("minimal","minimal","minimal","minimal","WT","WT","WT","WT"))
c.v.result <- anova(compare.variance)
TukeyHSD(compare.variance)
###No significant difference in the amount of variance, i.e. beta diversity, between the wildtype and minimal cell.
# PCoA Plot
```{r, results = "hide"}
png(filename="~/GitHub/MinimalCell/figures/Fig3.png",
width = 1200, height = 1200, res = 96*2)
plot.new()
par(mar = c(7, 7, 5, 7))
plot(g.essent.pcoa[ ,1], g.essent.pcoa[ ,2],
ylim = c(-1, 1), xlim = c(-0.55, 0.55),
xlab = "", ylab = "", xaxt = "n", yaxt = "n",
pch = 22, cex = 2.0, type = "n", cex.lab = 1.5, cex.axis = 1,
axes = FALSE)
# Add axes
axis(side = 2, lwd.ticks = 2, cex.axis = 1.25, las = 1,
labels = c("-1.0", "-0.5", "0.0", "0.5", "1.0"), at = c(-1, -0.5, 0, 0.5, 1))
axis(side = 4, lwd.ticks = 2, cex.axis = 1.25, las = 1,
at=c(-1, -0.5, 0, 0.5, 1), labels = F)
axis(side = 1, lwd.ticks = 2, cex.axis = 1.25, las = 1,
labels = c("-0.5", "0.0", "0.5"), at = c(-0.5, 0, 0.5))
png(filename="~/GitHub/MinimalCell/figures/Fig3.png",
width = 1200, height = 1200, res = 96*2)
# Run indicator analysis for gene association with strains
# https://cran.r-project.org/web/packages/indicspecies/vignettes/indicspeciesTutorial.pdf
ind <- multipatt(g.essent, cluster = g.essent.raw$treatment, func = "r.g",
control = how(nperm = 999))
# Run indicator analysis for gene association with strains
# https://cran.r-project.org/web/packages/indicspecies/vignettes/indicspeciesTutorial.pdf
ind <- multipatt(g.essent, cluster = g.essent.raw$treatment, func = "r.g",
control = how(nperm = 999))
ind.sig <- ind$sign[ which(ind$sign[5] <= 0.05), ]
?fisher.test
matrix(2,5,6,7)
matrix(c(2,5,6,7),nrow=2,ncol=2)
mytest<-matrix(c(2,5,6,7),nrow=2,ncol=2)
fisher.test(mytest)
#First make matrix for membrane transport genes
membrane<-matrix(c(3,16,1,14),nrow=2,ncol=2)
membrane
fisher.test(x=membrane,y=NULL,alternative=less)
fisher.test(x=membrane,y=NULL,alternative="less")
fisher.test(x=membrane,y=NULL,alternative="t")
fisher.test(x=membrane,y=NULL,alternative="g")
fisher.test(x=membrane,y=NULL,alternative="l")
carbon<-matrix(c(2,16,2,14),nrow=2,ncol=2)
fisher.test(x=carbon,y=NULL,alternative="l")
biosynthesis<-matrix(c(0,16,3,14),nrow=2,ncol=2)
fisher.test(x=biosynthesis,y=NULL,alternative="t")
biosynthesis
#First make matrix for membrane transport genes
membrane<-matrix(c(3,13,1,13),nrow=2,ncol=2)
fisher.test(x=membrane,y=NULL,alternative="l")
#First make matrix for membrane transport genes
membrane<-matrix(c(3,13,1,13),nrow=2,ncol=2)
fisher.test(x=membrane,y=NULL,alternative="t")
#First make matrix for membrane transport genes
membrane<-matrix(c(3,16,1,14),nrow=2,ncol=2)
fisher.test(x=membrane,y=NULL,alternative="t")
biosynthesis<-matrix(c(0,16,3,11),nrow=2,ncol=2)
fisher.test(x=biosynthesis,y=NULL,alternative="t")
#First make matrix for membrane transport genes
membrane<-matrix(c(3,13,1,13),nrow=2,ncol=2)
fisher.test(x=membrane,y=NULL,alternative="t")
membrane
#First make matrix for membrane transport genes
membrane<-matrix(c(3,13,1,13),nrow=2,ncol=2)
fisher.test(x=membrane,y=NULL,alternative="l")
carbon<-matrix(c(2,14,2,12),nrow=2,ncol=2)
fisher.test(x=carbon,y=NULL,alternative="l")
biosynthesis<-matrix(c(0,16,3,11),nrow=2,ncol=2)
fisher.test(x=biosynthesis,y=NULL,alternative="t")
fisher.test(x=biosynthesis,y=NULL,alternative="t", simulate.p.value = TRUE, B = 10000)
fisher.test(x=biosynthesis,y=NULL,alternative="t", simulate.p.value = TRUE, B = 10)
biosynthesis<-matrix(c(0,16,3,11),nrow=2,ncol=2)
fisher.test(x=biosynthesis,y=NULL,alternative="t", simulate.p.value = TRUE, B = 10)
