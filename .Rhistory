print(actives);
print("actmult");
print(actmult);
print("dormants");
print(dormants);
print("dormult");
print(dormult);
print("afs");
}
#
# Fourth case: mutation affects a dormant line
#
else if (i<=length(actives)+length(dormants)+length(actives)+length(dormants)){
i<-i-length(actives)-length(dormants)-length(actives);                      # which active line is affected by mutation?
dormants <-dormants[-i];                                                  	# remove lineage and its multiplicity
dormult <- dormult[-i];
# afs is unchanged
print("mutation - who of the dormants?");
print(i);
print("******");
print("actives");
print(actives);
print("actmult");
print(actmult);
print("dormants");
print(dormants);
print("dormult");
print(dormult);
print("afs");
}
#
# Last case: merging event
#
else{
#else if (i<=length(actives)+length(dormants)+length(actives)+length(dormants)+length(choose(length(actives),2))){          # check if really a merger happens
pair <- sample(1:length(actives),2,replace=F);               	 	# decide which lineages merge, i.e. make a pair
afs[actmult[pair[1]]] <- afs[actmult[pair[1]]]-1;                # here, we need to update the afs. First decrease entries of AFS corresponding to multiplicities of...
afs[actmult[pair[2]]] <- afs[actmult[pair[2]]]-1;                # ...the two merging lines by one
afs[actmult[pair[1]]+actmult[pair[2]]] <- afs[actmult[pair[1]]+actmult[pair[2]]]+1;
actmult[pair[1]] <- actmult[pair[1]]+actmult[pair[2]];           # increase multiplicity of first lineage
actives <- actives[-pair[2]];                                 		# delete second lineage and its multiplicity
actmult <- actmult[-pair[2]];
print("merger - who of the actives?");
print(pair[1]);
print(pair[2]);
print("******");
print("actives");
print(actives);
print("actmult");
print(actmult);
print("dormants");
print(dormants);
print("dormult");
print(dormult);
print("afs");
}
print(afs);
}
hist(afs, na+nd);
barplot(afs,xlab="multiplicities",ylab="numbers",ylim=c(1,na+nd));
}
###################################
#
# Generate allele frequency spectrum (AFS) backwards in time
# based on truncated seed bank coalescent
# (delete lines one they reach their defining mutation)
# AFS corresponds to SAD in "neutral theory"
#
# Input:
# na, nd  (sample size of actives and dormants)
# Switching rates cd, ca  (cd switching rate into dormancy, ca switching rate into active state)
# Mutation rates ma, md (ma mutation rate of actives, md mutation rate of dormants)
#
Seedbank_AFS <- function(na,nd,ca,cd,ma,md){
actives <- c(1:na);		   	 # labeling of active lines
actmult <- matrix(1,1,na); # all active lines have multiplicity 1 at present
dormants <- c(1:nd+na); # labeling of dormant lines
dormult <- matrix(1,1,nd); # all dormant lines have multiplicity 1 at present
afs <- matrix(0,1,na+nd);  # initialization of running afs, which is built successively.
afs[1] <- na+nd;           # Initially, there are only singletons (first entry eauls n, all other entries are 0)
print("actives");
print(actives);
print("actmult");
print(actmult);
print("dormants");
print(dormants);
print("dormult");
print(dormult);
print("afs");
print(afs);
#
# We now built the AFS recursively until a single ancestral line is reached (the line of the MRCA)
#
while (length(actives)+length(dormants)>1){ 	# We begin with sampling all the times for the next event which `compete' with each other; their minimum determines the type of the next event
if(cd!=0){
dormancytimes <- rexp(length(actives), rate=cd); 			# if cd \neq 0 (in R language, "\neq" is expressed as "!="), sample all potential dormancy times
}
else{dormancytimes <- c()}
if(ca!=0){
activationtimes <- rexp(length(dormants), rate=ca); 		# if ca \neq 0, sample all potential activation times
}
else{activationtimes <- c()}
if(ma!=0){
mutationsactive <- rexp(length(actives), rate=ma); 		# if ma \neq 0, propose mutation times for actives
}
else {mutationsactive <- c()}
if(md!=0){
mutationsdormant <- rexp(length(dormants), rate=md); 		# if md \neq 0, propose mutation times for dormants
}
else {mutationsdormant <- c()}
if(length(actives)>=2){
coalescencetimes <- rexp(choose(length(actives),2), rate=1); 		# if there are at least two actives present, sample all potential coalescence times for each pair
}
else {coalescencetimes <- c()} 									# if there is at most 1 active line, no coalescence is possible
#
#  Now we check which one of the above is the minimal time
#
i <- which.min(c(dormancytimes, activationtimes, mutationsactive, mutationsdormant, coalescencetimes));			# to which individual/pair does the minimal time belong?
#
# Now, according to the type of event, we update the current lists of actives, dormants, their multiplicities and the afs (if applicable)
#
# First case: dormancy event among actives
#
if (i<=length(actives)){                                      # check if event affects actives
dormants <- append(dormants, actives[i]);                   # update of list of dormants: add i-th individual (the one that is affected)
dormult <- append(dormult, actmult[i]);                     # update multiplicities (i.e., block sizes) of dormants
actives <- actives[-i];                                     # update of list of actives: remove i-th individual
actmult <- actmult[-i];                                     # update multiplicities of actives
# afs stays unaffected
print("dormancy initiation - who of the actives?");
print(i);
print("******");
print("actives");
print(actives);
print("actmult");
print(actmult);
print("dormants");
print(dormants);
print("dormult");
print(dormult);
print("afs");
print(afs);
}
#
# Second case: dormant individual resuscitates
#
else if (i<=length(actives)+length(dormants)){            # check if really a dormant is affected
i <- i-length(actives);                                 # which dormant line is affected?
actives <- append(actives, dormants[i]);                # update list of actives: add i-th individual (the one that is affected)
actmult <- append(actmult, dormult[i]);                 # update multiplicities (i.e., block sizes) of actives
dormants <- dormants[-i];                               # update of list of dormants: remove i-th individual
dormult <- dormult[-i];                                 # update multiplicities (i.e., block sizes) of dormants
# afs stays unaffected
print("resuscitation - who of the dormants?");
print(i);
print("******");
print("actives");
print(actives);
print("actmult");
print(actmult);
print("dormants");
print(dormants);
print("dormult");
print(dormult);
print("afs");
print(afs);
}
#
# Third case: mutation affects an active line
#
else if (i<=length(actives)+length(dormants)+length(actives)){                # check if really a mutation in the actives happens
i<-i-length(actives)-length(dormants);                                      # which active line is affected?
actives <- actives[-i];                                                   	# remove lineage and its multiplicity
actmult <- actmult[-i];
# afs is unchanged
print("mutation - who of the actives?");
print(i);
print("******");
print("actives");
print(actives);
print("actmult");
print(actmult);
print("dormants");
print(dormants);
print("dormult");
print(dormult);
print("afs");
}
#
# Fourth case: mutation affects a dormant line
#
else if (i<=length(actives)+length(dormants)+length(actives)+length(dormants)){
i<-i-length(actives)-length(dormants)-length(actives);                      # which active line is affected by mutation?
dormants <-dormants[-i];                                                  	# remove lineage and its multiplicity
dormult <- dormult[-i];
# afs is unchanged
print("mutation - who of the dormants?");
print(i);
print("******");
print("actives");
print(actives);
print("actmult");
print(actmult);
print("dormants");
print(dormants);
print("dormult");
print(dormult);
print("afs");
}
#
# Last case: merging event
#
else{
#else if (i<=length(actives)+length(dormants)+length(actives)+length(dormants)+length(choose(length(actives),2))){          # check if really a merger happens
pair <- sample(1:length(actives),2,replace=F);               	 	# decide which lineages merge, i.e. make a pair
afs[actmult[pair[1]]] <- afs[actmult[pair[1]]]-1;                # here, we need to update the afs. First decrease entries of AFS corresponding to multiplicities of...
afs[actmult[pair[2]]] <- afs[actmult[pair[2]]]-1;                # ...the two merging lines by one
afs[actmult[pair[1]]+actmult[pair[2]]] <- afs[actmult[pair[1]]+actmult[pair[2]]]+1;
actmult[pair[1]] <- actmult[pair[1]]+actmult[pair[2]];           # increase multiplicity of first lineage
actives <- actives[-pair[2]];                                 		# delete second lineage and its multiplicity
actmult <- actmult[-pair[2]];
print("merger - who of the actives?");
print(pair[1]);
print(pair[2]);
print("******");
print("actives");
print(actives);
print("actmult");
print(actmult);
print("dormants");
print(dormants);
print("dormult");
print(dormult);
print("afs");
}
print(afs);
}
hist(afs, na+nd);
#barplot(afs,xlab="multiplicities",ylab="numbers",ylim=c(1,na+nd));
}
install.packages('tinytex')
tinytex::install_tinytex()
install.packages('tinytex')
install.packages("tinytex")
tinytex::install_tinytex()
remove.packages("yaml")
install.packages("yaml")
require("yaml")
library(knitr)
install.packages("knitr")
require("knitr")
a <- 7.13
b <- c(7.5, 7.17, 7.4, 7.23)
t.test(b, mu = a, alternative = "less")
a <- 7.13
b <- c(7.5, 7.17, 7.4, 7.23)
t.test(b, mu = a, "two-sided")
help("t.test")
t.test(b, mu = a, "two.sided")
t.test(b, mu = a, "greater")
t.test(b, mu = a, "great")
t.test(b, mu = a, laternative = "two.sided")
rm(list=ls())
getwd()
setwd("~/GitHub/MinimalCell")
require("png")
require("dplyr")
require("vioplot")
require("grid")
require("dplyr")
require("knitr")
require("extrafont")
ma.raw <- read.csv("data2/MA_summary_for_R.csv", header = TRUE, sep =",")
# Preserve row names
ma <- as_tibble(ma.raw)
# Set data as factors and rename levels
ma$strain <- as.factor(ma$strain)
levels(ma$strain)[levels(ma$strain)=="MA_s1"] <- "Non-minimal"
levels(ma$strain)[levels(ma$strain)=="MA_3B"] <- "Minimal"
ma$strain <- factor(ma$strain, levels=c("Non-minimal","Minimal"))
# Subset mutation rate data by strain
mr.wt  <- filter(ma, strain== "Non-minimal") %>%
dplyr::select(per_nt_per_gen)
mr.wt  <- filter(ma, strain== "Non-minimal") %>%
dplyr::select(per_nt_per_gen)
mr.min  <- filter(ma, strain== "Minimal") %>%
dplyr::select(per_nt_per_gen)
# Test for equal variance: P = 0.42 --> homogeneous variance
equal.var <- var.test(mr.wt$per_nt_per_gen, mr.min$per_nt_per_gen)
# Test for differences between treatments: P = 0.54 --> no difference
mr.ttest <- t.test(mr.wt$per_nt_per_gen, mr.min$per_nt_per_gen, var.equal = TRUE)
ma.type.raw <- read.csv("data2/MA_grouped_bar_mut.types.csv")
# Preserve row names
ma.type <- as_tibble(ma.type.raw)
# Set data as factors and rename levels
ma.type$strain <- as.factor(ma.type$strain)
ma.type$mut <- as.factor(ma.type$mut)
levels(ma.type$strain)[levels(ma.type$strain)=="s1"] <- "Non-minimal"
levels(ma.type$strain)[levels(ma.type$strain)=="3B"] <- "Minimal"
levels(ma.type$mut)[levels(ma.type$mut)=="SNM"] <- "Single-nucleotide"
ma.type$strain <- factor(ma.type$strain, levels=c("Non-minimal","Minimal"))
ma.type$mut <- factor(ma.type$mut, levels = c("Insertion","Deletion","Over 100 bp","Single-nucleotide"))
ma.type <- ma.type %>% mutate(prop2 = sprintf("%0.2f",prop))
ma.type$strain <- as.factor(ma.type$strain)
ma.type$mut <- as.factor(ma.type$mut)
levels(ma.type$strain)[levels(ma.type$strain)=="s1"] <- "Non-minimal"
levels(ma.type$strain)[levels(ma.type$strain)=="3B"] <- "Minimal"
levels(ma.type$mut)[levels(ma.type$mut)=="SNM"] <- "Single-nucleotide"
ma.type$strain <- factor(ma.type$strain, levels=c("Non-minimal","Minimal"))
ma.type$mut <- factor(ma.type$mut, levels = c("Insertion", "Deletion",
"Over 100 bp","Single-nucleotide"))
ma.type <- ma.type %>% mutate(prop2 = sprintf("%0.2f", prop))
order.1 <- c(2, 4, 6, 1, 3, 5)
ma.type <- data.frame(ma.type, order.1)
ma.type <- ma.type[order(ma.type$order.1),]
ma.type.mat <- matrix(ma.type$count, ncol = 2, byrow = T)
colnames(ma.type.mat) <- c("minimal", "non-minimal")
rownames(ma.type.mat) <- c("insertion", "deletion", "snm")
ma.type.tab <- as.table(ma.type.mat)
ma.type.tab.margins <- addmargins(ma.type.tab)
ma.type.chi <- chisq.test(ma.type.tab)
ma.type.z <- as.data.frame(ma.type.chi$stdres)
ma.type.x2 <- ma.type.z$Freq^2
ma.type.p <- pchisq(ma.type.x2, df = 1, lower.tail = FALSE)
ma.type.p.adj <- p.adjust(ma.type.p, method="BH")
ma.type.post.hoc <- data.frame(ma.type.z, ma.type.x2, ma.type.p, ma.type.p.adj)
colnames(ma.type.post.hoc) <- c("type", "strain", "z", "chi2", "p", "p.adj")
ma.snm$strain <- as.factor(ma.snm$strain)
ma.snm$mut <- as.factor(ma.snm$mut)
levels(ma.snm$strain)[levels(ma.snm$strain)=="s1"] <- "Non-minimal"
levels(ma.snm$strain)[levels(ma.snm$strain)=="3B"] <- "Minimal"
ma.snm$strain <- factor(ma.snm$strain, levels=c("Non-minimal", "Minimal"))
ma.snm$mut <- factor(ma.snm$mut, levels =
c("A:T to C:G","A:T to G:C","A:T to T:A",
"C:G to G:C", "C:G to T:A", "C:G to A:T"))
ma.snm <- ma.snm %>% mutate(prop2 = sprintf("%0.2f", prop))
ma.snm.raw <- read.csv("data2/MA_grouped_bar_SNM.csv")
# Preserve row names
ma.snm <- as_tibble(ma.snm.raw)
ma.snm$strain <- as.factor(ma.snm$strain)
ma.snm$mut <- as.factor(ma.snm$mut)
levels(ma.snm$strain)[levels(ma.snm$strain)=="s1"] <- "Non-minimal"
levels(ma.snm$strain)[levels(ma.snm$strain)=="3B"] <- "Minimal"
ma.snm$strain <- factor(ma.snm$strain, levels=c("Non-minimal", "Minimal"))
ma.snm$mut <- factor(ma.snm$mut, levels =
c("A:T to C:G","A:T to G:C","A:T to T:A",
"C:G to G:C", "C:G to T:A", "C:G to A:T"))
ma.snm <- ma.snm %>% mutate(prop2 = sprintf("%0.2f", prop))
order.2 <- c(2, 4, 6, 8, 10, 12, 1, 3, 5, 7, 9, 11)
ma.snm <- data.frame(ma.snm,order.2)
ma.snm <- ma.snm[order(ma.snm$order.2),]
ma.snm.mat <- matrix(ma.snm$count, ncol = 2, byrow = T)
colnames(ma.snm.mat) <- c("non-minimal","minimal")
rownames(ma.snm.mat) <- c("A:T to C:G","A:T to G:C","A:T to T:A", "C:G to G:C",
"C:G to T:A", "C:G to A:T")
ma.snm.tab <- as.table(ma.snm.mat)
ma.snm.tab.margins <- addmargins(ma.snm.tab)
ma.snm.chi <- chisq.test(ma.snm.tab, simulate.p.value = TRUE, B = 10000)
ma.snm.z <- as.data.frame(ma.snm.chi$stdres)
ma.snm.x2 <- ma.snm.z$Freq^2
ma.snm.p <- pchisq(ma.snm.x2, df = 1, lower.tail = FALSE)
ma.snm.p.adj <- p.adjust(ma.snm.p, method="BH")
ma.snm.post.hoc <- data.frame(ma.snm.z, ma.snm.x2, ma.snm.p, ma.snm.p.adj)
colnames(ma.snm.post.hoc) <- c("type", "strain", "z", "chi2", "p", "p.adj")
png(filename="~/GitHub/MinimalCell/figures/Fig1b.png",
width = 1200, height = 1200, res = 96*2)
plot.new()
layout(matrix(c(1:3), byrow = T))
par(mar = c(2.5, 4, 1, 1), oma = c(3, 4, 1, 1))
### Make panel A ###
# Add ghost points
plot(jitter(rep(0.75, nrow(mr.wt)), amount = 0.1), mr.wt$per_nt_per_gen,
ylim = c(1e-09, 8e-08), xlim = c(0, 3), pch = 21, col = "white",
bg = "white", lwd = 2, cex = 1.7, yaxt = "n", xaxt = "n", cex.lab = 2,
cex.axis= 1.25, las = 1, ylab = "", xlab = "")
box(lwd = 2)
# Add violins
vioplot(mr.wt, col="lightblue", horizontal = F, at = 0.75, add = T,
lty = 1, drawRect = F)
vioplot(mr.min, col="pink", horizontal = F, at = 2.25, add = T,
lty = 1, drawRect = F)
# Add points on top of violins
points(jitter(rep(0.75, nrow(mr.wt)), amount = 0.1), mr.wt$per_nt_per_gen,
pch = 21, col = "blue", bg = "blue", cex = 0.5)
points(jitter(rep(2.25, nrow(mr.min)), amount = 0.1), mr.min$per_nt_per_gen,
pch = 21, col = "red", bg = "red", cex = 0.5)
# Add axes
axis(side = 2, lwd.ticks = 2, cex.axis = 1.25, las = 1,
labels = c(expression(paste("1·10"^"-8")), expression(paste("3·10"^"-8")),
expression(paste("5·10"^"-8")), expression(paste("7·10"^"-8"))),
at = c(1e-08, 3e-08, 5e-08, 7e-08))
axis(side = 4, lwd.ticks = 2, cex.axis = 1.25, las = 1,
at=c(1e-08, 3e-08, 5e-08, 7e-08), labels = F)
axis(side = 3, lwd.ticks = 2, cex.axis = 1.25, las = 1,
at = c(0.75, 2.25), labels = F)
axis(side = 1, lwd.ticks = 2, cex.axis = 1.25, las = 1,
labels = c("Non-minimal", "Minimal"), at = c(0.75, 2.25))
# Add y-axis label
mtext("Mutation rate", side = 2, outer = TRUE, cex = 1.25, line = 2, adj = 0.94)
mtext(expression(paste('(mut · nt'^-1*' · gen' ^-1*')')),
side = 2, outer = TRUE, cex = 0.70, line = 0.55, adj = 0.925)
#Add panel label
text(0, 7.5e-08, labels = "A", cex = 2)
#Add P-value for t-test
mtext(expression(~italic("P")~"= 0.54"), line = -1.8, cex = 0.80, at = 2.87)
### Make panel B ###
barplot(ma.type$prop, col = c("blue", "red", "blue", "red", "blue", "red"),
ylim = c(0, 1.2), space = c(1, 0, 1, 0, 1, 0), las = 1,
yaxt = "n", xaxt = "n")
box(lwd = 2)
# Add axes
axis(side = 2, lwd.ticks = 2, cex.axis = 1.25, las = 1,
labels = c("0.00", "0.50", "1.00"),
at = c(0, 0.5, 1.0))
axis(side = 4, lwd.ticks = 2, cex.axis = 1.25, las = 1,
at=c(0, 0.5,1.0), labels = F)
# Add x-axis labels
text(2.0, -0.1, expression("Insertions"), cex= 1.25, srt = 0, xpd = NA)
text(5.0, -0.1, expression("Deletions"), cex= 1.25, srt = 0, xpd = NA)
text(8.0, -0.1, expression("SNM"), cex= 1.25, srt = 0, xpd = NA)
# Add y-axis label
mtext("Proportion", side = 2, outer = TRUE, cex = 1.25, line = 1.9, adj = 0.52)
# Add bar value
#text(1.5, 0.10, expression("0.02"), cex= 0.85)
#text(2.5, 0.09, expression("0.03"), cex= 0.85)
#text(4.5, 0.15, expression("0.09"), cex= 0.85)
#text(5.5, 0.16, expression("0.10"), cex= 0.85)
#text(7.5, 0.95, expression("0.89"), cex= 0.85)
#text(8.5, 0.92, expression("0.86"), cex= 0.85)
# Add panel label
text(1, 1.05, labels = "B", cex = 2)
# Add vertical dashed lines
abline(v = c(3.5, 6.5), col=c("grey"), lty = 3, lwd = 2)
# Add legend
legend(1.2, 1.18, c("Non-minimal", "Minimal"), pch = 22,
pt.bg = c("blue", "red"), pt.cex = 2, pt.lwd = 1.5,
bty = 'n', y.intersp = 1)
# Add P-value for t-test
mtext(expression(~italic("P")~"= 0.125"), line = -1.7, cex = 0.80, at = 8.6)
### Make panel C ###
barplot(ma.snm$prop, col = c("blue", "red", "blue", "red", "blue", "red",
"blue", "red", "blue", "red", "blue", "red"), ylim = c(0, 1.2),
space = c(1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0),
las =1, yaxt = "n", xaxt = "n")
box(lwd = 2)
# Add axes
axis(side = 2, lwd.ticks = 2, cex.axis = 1.25, las = 1,
labels = c("0.00", "0.50", "1.00"),
at = c(0, 0.5, 1.0))
axis(side = 4, lwd.ticks = 2, cex.axis = 1.25, las = 1,
at=c(0, 0.5, 1.0), labels = F)
# Add x-axis labels
text(2, -0.075, "A:T \u2192 C:G", cex= 1, srt = 0, xpd = NA, col = "darkgrey")
text(5, -0.075, "A:T \u2192 G:C", cex= 1, srt = 0, xpd = NA, col = "darkgrey")
text(8, -0.075, "A:T \u2192 T:A", cex= 1, srt = 0, xpd = NA, col = "darkgrey")
text(11, -0.075, "C:G \u2192 G:C", cex= 1, srt = 0, xpd = NA, col = "darkgrey")
text(14, -0.075, "C:G \u2192 T:A", cex= 1, srt = 0, xpd = NA, col = "darkgrey")
text(17, -0.075, "C:G \u2192 A:T", cex= 1, srt = 0, xpd = NA, col = "darkgrey")
# Add mutation types on x-axis
#mtext(expression("("~italic("transversion")~")"), line = -13.5, cex = 0.65, at = 2, col = "grey")
#mtext(expression("("~italic("transition")~")"), line = -13.5, cex = 0.65, at = 5, col = "grey")
#mtext(expression("("~italic("transversion")~")"), line = -13.5, cex = 0.65, at = 8, col = "grey")
#mtext(expression("("~italic("transversion")~")"), line = -13.5, cex = 0.65, at = 11, col = "grey")
#mtext(expression("("~italic("transition")~")"), line = -13.5, cex = 0.65, at = 14, col = "grey")
#mtext(expression("("~italic("transition")~")"), line = -13.5, cex = 0.65, at = 17, col = "grey")
# Add x-axis labels
#text(2.0, -0.1, expression("Insertions"), cex= 1.25, srt = 0, xpd = NA)
#text(5.0, -0.1, expression("Deletions"), cex= 1.25, srt = 0, xpd = NA)
#text(8.0, -0.1, expression("SNM"), cex= 1.25, srt = 0, xpd = NA)
# Add y-axis label
mtext("Proportion", side = 2, outer = TRUE, cex = 1.25, line = 2, adj = 0.125)
# Add bar value
#text(1.5, 0.06, expression("0.01"), cex= 0.85)
#text(2.5, 0.06, expression("0.01"), cex= 0.85)
#text(4.5, 0.13, expression("0.07"), cex= 0.85)
#text(5.5, 0.08, expression("0.02"), cex= 0.85)
#text(7.5, 0.10, expression("0.04"), cex= 0.85)
#text(8.5, 0.10, expression("0.04"), cex= 0.85)
#text(10.5, 0.16, expression("0.10"), cex= 0.85)
#text(11.5, 0.07, expression("0.01"), cex= 0.85)
#text(13.5, 0.48, expression("0.42"), cex= 0.85)
#text(14.5, 0.71, expression("0.65"), cex= 0.85)
#text(16.5, 0.40, expression("0.36"), cex= 0.85)
#text(17.5, 0.33, expression("0.27"), cex= 0.85)
# Add panel label
text(1, 1.05, labels = "C", cex = 2)
# Add legend
legend(1.4, 1.2, c("Non-minimal", "Minimal"), pch = 22,
pt.bg = c("blue", "red"), pt.cex = 2, pt.lwd = 1.5,
bty = 'n', y.intersp = 1)
# Add P-value for t-test
mtext(expression(~italic("P")~"< 0.0001"), line = -1.7, cex = 0.80, at = 17)
# Add vertical dashed lines
abline(v = c(6.5, 12.5), col=c("grey"), lty = 3, lwd = 2)
# Add symbols for posthoc significance
text(2, 0.10, expression("ns"), cex= 1.2)
text(5, 0.165, expression("***"), cex= 1.5)
text(8, 0.15, expression("ns"), cex= 1.2)
text(11, 0.16, expression("***"), cex= 1.5)
text(14, 0.75, expression("***"), cex= 1.5)
text(17, 0.45, expression("***"), cex= 1.5)
# Add mutation type labels
text(3.5, -0.25, expression("G:C bias"), cex= 1.25, srt = 0, xpd = NA)
text(9.5, -0.25, expression("Neutral"), cex= 1.25, srt = 0, xpd = NA)
text(15.5, -0.25, expression("A:T bias"), cex= 1.25, srt = 0, xpd = NA)
# Close Plot Device
dev.off()
graphics.off()
# Show Plot
#img <- readPNG("~/GitHub/MinimalCell/figures/Fig1.png")
img <- readPNG("~/GitHub/MinimalCell/figures/Fig1b.png")
grid.raster(img)
