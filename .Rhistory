# Plot points by strain
points(essent.wt[ ,1], essent.wt[ ,2], pch = 21,
cex = 2, col = "blue", bg = "blue", lwd = 2)
points(essent.min[ ,1], essent.min[ ,2], pch = 21,
cex = 2, col = "red", bg = "red", lwd = 2)
# Add P-value associated with PERMANOVA
mtext(expression(~italic("P")~"= 0.029"), line = -1.75, cex = 1.0, at = -0.35)
# Close Plot Device
dev.off()
graphics.off()
# Show Plot
img <- readPNG("~/GitHub/MinimalCell/figures/Fig3.png")
grid.raster(img)
png(filename="~/GitHub/MinimalCell/figures/Fig3.png",
width = 1200, height = 1200, res = 96*2)
plot.new()
par(mar = c(7, 7, 5, 7))
# plot(g.essent.pcoa[ ,1], g.essent.pcoa[ ,2],
#      ylim = c(-1, 1), xlim = c(-0.55, 0.55),
#      xlab = paste("PCoA 1 (", explainvar1, "%)", sep = ""),
#      ylab = paste("PCoA 2 (", explainvar2, "%)", sep = ""),
#      #xlab = "", ylab = "", xaxt = "n", yaxt = "n",
#      pch = 22, cex = 2.0, type = "n", cex.lab = 1.5, cex.axis = 1,
#      axes = FALSE)
plot(g.essent.pcoa[ ,1], g.essent.pcoa[ ,2],
ylim = c(-1, 1), xlim = c(-0.55, 0.55),
xlab = "", ylab = "", xaxt = "n", yaxt = "n",
pch = 22, cex = 2.0, type = "n", cex.lab = 1.5, cex.axis = 1,
axes = FALSE)
# Add axes
axis(side = 2, lwd.ticks = 2, cex.axis = 1.25, las = 1,
labels = c("-1.0", "-0.5", "0.0", "0.5", "1.0"), at = c(-1, -0.5, 0, 0.5, 1))
axis(side = 4, lwd.ticks = 2, cex.axis = 1.25, las = 1,
at=c(-1, -0.5, 0, 0.5, 1), labels = F)
axis(side = 1, lwd.ticks = 2, cex.axis = 1.25, las = 1,
labels = c("-0.5", "0.0", "0.5"), at = c(-0.5, 0, 0.5))
axis(side = 3, lwd.ticks = 2, cex.axis = 1.25, las = 1,
at = c(-0.5, 0, 0.5), labels = F)
abline(h = 0, v = 0, lty = 3)
box(lwd = 2)
# Add axis labels
#mtext(expression(paste("PCoA 1 ( "%)")), side = 2,
#     outer = TRUE, cex = 1.5, line = -3.0)
#paste("PCoA 1 (", explainvar1, "%)", sep = "")
mtext(expression(paste("PCoA 1 (42.1 %)", sep = "")), side = 1,
outer = TRUE, cex = 1.5, line = -3.0)
mtext(expression(paste("PCoA 2 (16.5 %)", sep = "")), side = 2,
outer = TRUE, cex = 1.5, line = -3.0)
#mtext(expression(paste("PCoA 2 (", explainvar2, "%)")), side = 1,
#      outer = TRUE, cex = 1.5, line = -3.0)
# Add ellipses
ordiellipse(cbind(g.essent.pcoa$PC1, g.essent.pcoa$PC2), g.essent.pcoa$treatment,
kind = "sd", conf = 0.95, lwd = 2, lty = 3, draw = "lines",
col = c("blue","red"), label = FALSE)
# Subset PCoA scores by strain
essent.wt <- g.essent.pcoa[which(g.essent.pcoa$treatment == "Wildtype"), ]
essent.min <- g.essent.pcoa[which(g.essent.pcoa$treatment == "Minimal"), ]
# Plot points by strain
points(essent.wt[ ,1], essent.wt[ ,2], pch = 21,
cex = 2, col = "blue", bg = "blue", lwd = 2)
points(essent.min[ ,1], essent.min[ ,2], pch = 21,
cex = 2, col = "red", bg = "red", lwd = 2)
# Add P-value associated with PERMANOVA
mtext(expression(~italic("P")~"= 0.029"), line = -1.75, cex = 1.0, at = -0.4)
# Close Plot Device
dev.off()
graphics.off()
# Show Plot
img <- readPNG("~/GitHub/MinimalCell/figures/Fig3.png")
grid.raster(img)
rm(list=ls())
getwd()
setwd("~/GitHub/MinimalCell")
```
## Load packages and functions
```{r}
require("png")
require("dplyr")
require("grid")
require("vegan")
```
# Load data
```{r}
# Load data
g.essent.raw <- read.csv("data2/GxP_Mm_essential.csv")
g.essent.raw$sample <- as.factor(g.essent.raw$sample)
g.essent.raw$treatment <- as.factor(g.essent.raw$treatment)
levels(g.essent.raw$treatment)[levels(g.essent.raw$treatment)=="s1"] <- "Wildtype"
levels(g.essent.raw$treatment)[levels(g.essent.raw$treatment)=="s3"] <- "Minimal"
g.essent <- as_tibble(g.essent.raw)
g.essent <- as.matrix(g.essent[,3:ncol(g.essent)])
```
# Permutational mulivariate analyis of variance (PERMANOVA)
```{r}
g.essent.adonis <- adonis(g.essent ~ g.essent.raw$treatment, method = "bray", permutations = 9999)
#            Df SumsOfSqs MeanSqs  F.Model  R2        Pr(>F)
# strain     1   0.95301  0.95301  4.1217   0.40721   0.029 *
# Residuals  6   1.38731  0.23122           0.59279
# Total      7   2.34032                    1.00000
# (same qualitative result with jaccard, canberra, gower, horn, and Kulczynski)
```
# Principal Coordinates Analysis (PCoA)
```{r}
# Create a distance matrix
g.essent.dist <- vegdist(g.essent, method = 'bray', upper = TRUE, diag = TRUE)
g.essent.dist <- as_tibble(data.matrix(g.essent.dist))
# Run PCoA and quantify explained variance
pcoa.eig <- cmdscale(g.essent.dist, eig = TRUE, k = 3)
explainvar1 <- round(pcoa.eig$eig[1] / sum(pcoa.eig$eig), 3) * 100 # 42.1 %
explainvar2 <- round(pcoa.eig$eig[2] / sum(pcoa.eig$eig), 3) * 100 # 16.5 %
explainvar3 <- round(pcoa.eig$eig[3] / sum(pcoa.eig$eig), 3) * 100 # 15.1 %
sum.eig <- sum(explainvar1, explainvar2, explainvar3) # 73 %
# Add sample and treatment IDs
g.essent.pcoa <- as.data.frame(pcoa.eig[1])
g.essent.pcoa$treatment <- g.essent.raw$treatment
row.names(g.essent.pcoa) <- g.essent.raw$sample
g.essent.pcoa$sample <- g.essent.raw$sample
names(g.essent.pcoa)[1:3] <- c('PC1', 'PC2', 'PC3')
```
## PCoA Plot
```{r, results = "hide"}
png(filename="~/GitHub/MinimalCell/figures/Fig3.png",
width = 1200, height = 1200, res = 96*2)
plot.new()
par(mar = c(7, 7, 5, 7))
plot(g.essent.pcoa[ ,1], g.essent.pcoa[ ,2],
ylim = c(-1, 1), xlim = c(-0.55, 0.55),
xlab = "", ylab = "", xaxt = "n", yaxt = "n",
pch = 22, cex = 2.0, type = "n", cex.lab = 1.5, cex.axis = 1,
axes = FALSE)
# Add axes
axis(side = 2, lwd.ticks = 2, cex.axis = 1.25, las = 1,
labels = c("-1.0", "-0.5", "0.0", "0.5", "1.0"), at = c(-1, -0.5, 0, 0.5, 1))
axis(side = 4, lwd.ticks = 2, cex.axis = 1.25, las = 1,
at=c(-1, -0.5, 0, 0.5, 1), labels = F)
axis(side = 1, lwd.ticks = 2, cex.axis = 1.25, las = 1,
labels = c("-0.5", "0.0", "0.5"), at = c(-0.5, 0, 0.5))
axis(side = 3, lwd.ticks = 2, cex.axis = 1.25, las = 1,
at = c(-0.5, 0, 0.5), labels = F)
abline(h = 0, v = 0, lty = 3)
box(lwd = 2)
# Add axis labels
mtext(expression(paste("PCoA 1 (42.1 %)", sep = "")), side = 1,
outer = TRUE, cex = 1.5, line = -3.0)
mtext(expression(paste("PCoA 2 (16.5 %)", sep = "")), side = 2,
outer = TRUE, cex = 1.5, line = -3.0)
# Add ellipses
ordiellipse(cbind(g.essent.pcoa$PC1, g.essent.pcoa$PC2), g.essent.pcoa$treatment,
kind = "sd", conf = 0.95, lwd = 2, lty = 3, draw = "lines",
col = c("blue","red"), label = FALSE)
# Subset PCoA scores by strain
essent.wt <- g.essent.pcoa[which(g.essent.pcoa$treatment == "Wildtype"), ]
essent.min <- g.essent.pcoa[which(g.essent.pcoa$treatment == "Minimal"), ]
# Plot points by strain
points(essent.wt[ ,1], essent.wt[ ,2], pch = 21,
cex = 2, col = "blue", bg = "blue", lwd = 2)
points(essent.min[ ,1], essent.min[ ,2], pch = 21,
cex = 2, col = "red", bg = "red", lwd = 2)
# Add P-value associated with PERMANOVA
mtext(expression(~italic("P")~"= 0.029"), line = -1.75, cex = 1.0, at = -0.4)
# Close Plot Device
dev.off()
graphics.off()
# Show Plot
img <- readPNG("~/GitHub/MinimalCell/figures/Fig3.png")
grid.raster(img)
rm(list=ls())
getwd()
setwd("~/GitHub/MinimalCell")
```
## Load packages and functions
```{r}
require("png")
require("dplyr")
require("grid")
sem <- function(x) sqrt(var(x)/length(x))
LL.95 <- function(x) t.test(x)$conf.int[1]
UL.95 <- function(x) t.test(x)$conf.int[2]
```
# Load and process data
```{r}
# Load data
dnds <- read.csv("data2/cases_Mm.300.csv")
colnames(dnds)[12] <- "dnds"
colnames(dnds)[2] <- "strain"
# Convert strain to factor
dnds$strain <- as.factor(dnds$strain)
# Add x-values for plotting
x <- c(1,1,1,1,3,3,3,3)
dnds <- data.frame(dnds, x)
# Subset dN/dS by strain and summary statistics
dnds.wt  <- filter(dnds, strain == "Wildtype") %>%
dplyr::select(strain, dnds, x)
dnds.min  <- filter(dnds, strain == "Minimal") %>%
dplyr::select(strain, dnds, x)
mean.dnds.wt <- mean(dnds.wt$dnds)
sem.dnds.wt <- sem(dnds.wt$dnds)
LL.95.dnds.wt <- LL.95(dnds.wt$dnds)
UL.95.dnds.wt <- UL.95(dnds.wt$dnds)
mean.dnds.min <- mean(dnds.min$dnds)
sem.dnds.min <- sem(dnds.min$dnds)
LL.95.dnds.min <- LL.95(dnds.min$dnds)
UL.95.dnds.min <- UL.95(dnds.min$dnds)
```
## t-test
```{r}
# Test for equal variance: P = 0.283 --> homogeneous variance
equal.var <- var.test(dnds.wt$dnds, dnds.min$dnds)
# Test for differences between strains: P = 0.282 --> no difference
dnds.ttest <- t.test(dnds.wt$dnds, dnds.min$dnds, var.equal = TRUE)
```
# Initiate figure
```{r}
# Make figure
png(filename="~/GitHub/MinimalCell/figures/FigS1.png",
width = 1200, height = 1200, res = 96*2)
plot.new()
par(mar = c(7, 7, 5, 7))
# Add wildtype points
plot(jitter(rep(1, length(dnds.wt$dnds)), amount = 0.2), dnds.wt$dnds,
xlim = c(0, 4), ylim = c(0.0, 3.5), type = "p", pch = 21, bg = "blue",
col = "blue", cex = 2, ylab = "", xlab = "",
cex.lab = 1.5, las = 1, lwd = 2, yaxt = "n", xaxt = "n")
box(lwd=2)
# Add horizontal line
abline(h = 1, col="darkgray", lty = 2, lwd = 2)
# Add minimal points
points(jitter(rep(3, length(dnds.min$dnds)), amount = 0.2), dnds.min$dnds,
pch = 21, bg = "red", col = "red", lwd = 2, cex = 2)
# Add means
points(1, mean.dnds.wt, pch = 22, col = "blue",
bg = "white", lwd = 2, cex = 2.75)
points(3, mean.dnds.min, pch = 22, col = "red",
bg = "white", lwd = 2, cex = 2.75)
# Add confidence intervals
arrows(x0 = c(1), y0 = mean.dnds.wt, y1 = LL.95.dnds.wt, angle = 90,
length = 0.1, lwd = 2, col = "blue")
arrows(x0 = c(1), y0 = mean.dnds.wt, y1 = UL.95.dnds.wt, angle = 90,
length=0.1, lwd = 2, col = "blue")
arrows(x0 = c(3), y0 = mean.dnds.min, y1 = LL.95.dnds.wt, angle = 90,
length = 0.1, lwd = 2, col = "red")
arrows(x0 = c(3), y0 = mean.dnds.min, y1 = UL.95.dnds.wt, angle = 90,
length=0.1, lwd = 2, col = "red")
# Add axes and labels
axis(side = 2, lwd.ticks = 2, cex.axis = 1.25, las = 1,
labels = c("0.0", "1.0", "2.0", "3.0"), at = c(0,1, 2, 3))
axis(side = 4, lwd.ticks = 2, cex.axis = 1.25, las = 1,
at=c(0, 1, 2, 3), labels = F)
axis(side = 3, lwd.ticks = 2, cex.axis = 1.25, las = 1,
at = c(1, 3), labels = F)
axis(side = 1, lwd.ticks = 2, cex.axis = 1.25, las = 1,
labels = c("Wildtype", "Minimal"),
col.axis = "darkgray", at = c(1, 3))
mtext(expression('Strain'), side = 1,
outer = TRUE, cex = 1.5, line = -3.5, adj = 0.5)
mtext(expression(italic("dN/dS")), side = 2,
outer = TRUE, cex = 1.5, line = -3.0)
# Add P-values
mtext(expression(~italic("P")~"= 0.282"), line = -2.5, cex = 1.0, at = 0.5)
# Close Plot Device
dev.off()
graphics.off()
# Show Plot
img <- readPNG("~/GitHub/MinimalCell/figures/FigS1.png")
grid.raster(img)
png(filename="~/GitHub/MinimalCell/figures/FigS1.png",
width = 1200, height = 1200, res = 96*2)
plot.new()
par(mar = c(7, 7, 5, 7))
# Add wildtype points
plot(jitter(rep(1, length(dnds.wt$dnds)), amount = 0.2), dnds.wt$dnds,
xlim = c(0, 4), ylim = c(0.0, 3.5), type = "p", pch = 21, bg = "blue",
col = "blue", cex = 2, ylab = "", xlab = "",
cex.lab = 1.5, las = 1, lwd = 2, yaxt = "n", xaxt = "n")
box(lwd=2)
# Add horizontal line
abline(h = 1, col="darkgray", lty = 2, lwd = 2)
# Add minimal points
points(jitter(rep(3, length(dnds.min$dnds)), amount = 0.2), dnds.min$dnds,
pch = 21, bg = "red", col = "red", lwd = 2, cex = 2)
# Add means
points(1, mean.dnds.wt, pch = 22, col = "blue",
bg = "white", lwd = 2, cex = 2.75)
points(3, mean.dnds.min, pch = 22, col = "red",
bg = "white", lwd = 2, cex = 2.75)
# Add confidence intervals
arrows(x0 = c(1), y0 = mean.dnds.wt, y1 = LL.95.dnds.wt, angle = 90,
length = 0.1, lwd = 2, col = "blue")
arrows(x0 = c(1), y0 = mean.dnds.wt, y1 = UL.95.dnds.wt, angle = 90,
length=0.1, lwd = 2, col = "blue")
arrows(x0 = c(3), y0 = mean.dnds.min, y1 = LL.95.dnds.wt, angle = 90,
length = 0.1, lwd = 2, col = "red")
arrows(x0 = c(3), y0 = mean.dnds.min, y1 = UL.95.dnds.wt, angle = 90,
length=0.1, lwd = 2, col = "red")
# Add axes and labels
axis(side = 2, lwd.ticks = 2, cex.axis = 1.25, las = 1,
labels = c("0.0", "1.0", "2.0", "3.0"), at = c(0,1, 2, 3))
axis(side = 4, lwd.ticks = 2, cex.axis = 1.25, las = 1,
at=c(0, 1, 2, 3), labels = F)
axis(side = 3, lwd.ticks = 2, cex.axis = 1.25, las = 1,
at = c(1, 3), labels = F)
axis(side = 1, lwd.ticks = 2, cex.axis = 1.25, las = 1,
labels = c("Wildtype", "Minimal"),
col.axis = "darkgray", at = c(1, 3))
mtext(expression('Strain'), side = 1,
outer = TRUE, cex = 1.5, line = -3.5, adj = 0.5)
mtext(expression(italic("dN/dS")), side = 2,
outer = TRUE, cex = 1.5, line = -3.0)
# Add P-values
mtext(expression(~italic("P")~"= 0.282"), line = -2.0, cex = 1.0, at = 0.5)
# Close Plot Device
dev.off()
graphics.off()
# Show Plot
img <- readPNG("~/GitHub/MinimalCell/figures/FigS1.png")
grid.raster(img)
require("png")
require("dplyr")
#require("vegan")
#require("ade4")
#require("viridis")
#require("gplots")
#require("BiodiversityR")
#require("indicspecies")
#require("ggplot2")
#require("tidyverse")
#require("ggpubr")
#require("Hmisc")
require("vioplot")
require("grid")
# Load mutation rate data
ma.raw <- read.csv("data2/MA_summary_for_R.csv", header = TRUE, sep =",")
# Preserve row names
ma <- as_tibble(ma.raw)
# Set data as factors and rename levels
ma$strain <- as.factor(ma$strain)
levels(ma$strain)[levels(ma$strain)=="MA_s1"] <- "Wildtype"
levels(ma$strain)[levels(ma$strain)=="MA_3B"] <- "Minimal"
ma$strain <- factor(ma$strain, levels=c("Wildtype","Minimal"))
# Subset mutation rate data by strain
mr.wt  <- filter(ma, strain== "Wildtype") %>%
dplyr::select(per_nt_per_gen)
mr.min  <- filter(ma, strain== "Minimal") %>%
dplyr::select(per_nt_per_gen)
ma.type.raw <- read_csv("data2/MA_grouped_bar_mut.types.csv")
# Preserve row names
ma.type <- as_tibble(ma.type.raw)
# Set data as factors and rename levels
ma.type$strain <- as.factor(ma.type$strain)
ma.type$mut <- as.factor(ma.type$mut)
levels(ma.type$strain)[levels(ma.type$strain)=="s1"] <- "Wildtype"
levels(ma.type$strain)[levels(ma.type$strain)=="3B"] <- "Minimal"
levels(ma.type$mut)[levels(ma.type$mut)=="SNM"] <- "Single-nucleotide"
ma.type$strain <- factor(ma.type$strain, levels=c("Wildtype","Minimal"))
ma.type$mut <- factor(ma.type$mut, levels = c("Insertion","Deletion","Over 100 bp","Single-nucleotide"))
ma.type <- ma.type %>% mutate(prop2 = sprintf("%0.2f",prop))
# Reorder table for plotting
order.1 <- c(2,4,6,1,3,5)
ma.type <- data.frame(ma.type,order.1)
ma.type <- ma.type[order(ma.type$order.1),]
# Load data
ma.type.raw <- read_csv("data2/MA_grouped_bar_mut.types.csv")
# Load data
ma.type.raw <- read.csv("data2/MA_grouped_bar_mut.types.csv")
# Preserve row names
ma.type <- as_tibble(ma.type.raw)
ma.type$strain <- as.factor(ma.type$strain)
ma.type$mut <- as.factor(ma.type$mut)
levels(ma.type$strain)[levels(ma.type$strain)=="s1"] <- "Wildtype"
levels(ma.type$strain)[levels(ma.type$strain)=="3B"] <- "Minimal"
levels(ma.type$mut)[levels(ma.type$mut)=="SNM"] <- "Single-nucleotide"
ma.type$strain <- factor(ma.type$strain, levels=c("Wildtype","Minimal"))
ma.type$mut <- factor(ma.type$mut, levels = c("Insertion","Deletion","Over 100 bp","Single-nucleotide"))
ma.type <- ma.type %>% mutate(prop2 = sprintf("%0.2f",prop))
order.1 <- c(2,4,6,1,3,5)
ma.type <- data.frame(ma.type,order.1)
ma.type <- ma.type[order(ma.type$order.1),]
ma.snm.raw <- read.csv("data2/MA_grouped_bar_SNM.csv")
# Preserve row names
ma.snm <- as_tibble(ma.snm.raw)
# Set data as factors and rename levels
ma.snm$strain <- as.factor(ma.snm$strain)
ma.snm$mut <- as.factor(ma.snm$mut)
levels(ma.snm$strain)[levels(ma.snm$strain)=="s1"] <- "Wildtype"
levels(ma.snm$strain)[levels(ma.snm$strain)=="3B"] <- "Minimal"
ma.snm$strain <- factor(ma.snm$strain, levels=c("Wildtype","Minimal"))
ma.snm$mut <- factor(ma.snm$mut, levels =
c("A:T to C:G","A:T to G:C","A:T to T:A",
"C:G to G:C", "C:G to T:A", "C:G to A:T"))
ma.snm <- ma.snm %>% mutate(prop2 = sprintf("%0.2f",prop))
order.2 <- c(2,4,6,8,10,12,1,3,5,7,9,11)
ma.snm <- data.frame(ma.snm,order.2)
ma.snm <- ma.snm[order(ma.snm$order.2),]
png(filename="~/GitHub/MinimalCell/figures/Fig1.png",
width = 1200, height = 1200, res = 96*2)
plot.new()
#par(oma=c(2,4,0,0), mar=c(2,4,4,1), mfrow=c(1,3))
#par(oma=c(2,4,0,0), mar=c(2,4,4,1), mfrow=c(1,3))
layout(matrix(c(1:3), byrow = T))
par(mar = c(2.5, 4, 1, 1), oma = c(3, 4, 1, 1))
### Make panel A ###
# Add ghost points
plot(jitter(rep(0.75, nrow(mr.wt)), amount = 0.1), mr.wt$per_nt_per_gen,
ylim = c(1e-09, 8e-08), xlim = c(0, 3), pch = 21, col = "white",
bg = "white", lwd = 2, cex = 1.7, yaxt = "n", xaxt = "n", cex.lab = 2,
cex.axis= 1.25, las = 1, ylab = "", xlab = "")
box(lwd=2)
# Add violins
vioplot(mr.wt, col="lightblue", horizontal = F, at = 0.75, add = T, lty = 1, drawRect = F)
vioplot(mr.min, col="pink", horizontal = F, at = 2.25, add = T, lty = 1, drawRect = F)
# Add points on top of violins
points(jitter(rep(0.75, nrow(mr.wt)), amount = 0.1), mr.wt$per_nt_per_gen,
pch = 21, col = "blue", bg = "blue", cex = 0.5)
points(jitter(rep(2.25, nrow(mr.min)), amount = 0.1), mr.min$per_nt_per_gen,
pch = 21, col = "red", bg = "red", cex = 0.5)
# Add axes
axis(side = 2, lwd.ticks = 2, cex.axis = 1.25, las = 1,
labels = c(expression(paste("1·10"^"-8")), expression(paste("3·10"^"-8")),
expression(paste("5·10"^"-8")), expression(paste("7·10"^"-8"))),
at = c(1e-08, 3e-08, 5e-08, 7e-08))
axis(side = 4, lwd.ticks = 2, cex.axis = 1.25, las = 1,
at=c(1e-08, 3e-08, 5e-08, 7e-08), labels = F)
axis(side = 3, lwd.ticks = 2, cex.axis = 1.25, las = 1,
at = c(0.75, 2.25), labels = F)
axis(side = 1, lwd.ticks = 2, cex.axis = 1.25, las = 1,
labels = c("Wildtype", "Minimal"), at = c(0.75, 2.25))
# Add y-axis label
mtext("Mutation rate", side = 2, outer = TRUE, cex = 1.25, line = 2, adj = 0.94)
mtext(expression(paste('(mut · nt'^-1*' · gen' ^-1*')')),
side = 2, outer = TRUE, cex = 0.70, line = 0.55, adj = 0.925)
# Test for equal variance: P = 0.42 --> homogeneous variance
equal.var <- var.test(mr.wt$per_nt_per_gen, mr.min$per_nt_per_gen)
# Test for differences between treatments: P = 0.54 --> no difference
mr.ttest <- t.test(mr.wt$per_nt_per_gen, mr.min$per_nt_per_gen, var.equal = TRUE)
# Add P-value for t-test
mtext(expression(~italic("P")~"= 0.54"), line = -3.5, cex = 0.80, at = 0.09)
# Add panel label
text(-0.025, 7.5e-08, labels = "A", cex = 2)
### Make panel B ###
barplot(ma.type$prop, col = c("blue", "red", "blue", "red", "blue", "red"),
ylim = c(0,1), space = c(1,0,1,0,1,0), las =1, yaxt = "n", xaxt = "n")
box(lwd=2)
# Add axes
axis(side = 2, lwd.ticks = 2, cex.axis = 1.25, las = 1,
labels = c("0.00", "0.50", "1.00"),
at = c(0, 0.5, 1.0))
axis(side = 4, lwd.ticks = 2, cex.axis = 1.25, las = 1,
at=c(0, 0.5,1.0), labels = F)
# Add x-axis labels
text(2.0, -0.1, expression("Insertions"), cex= 1.25, srt = 0, xpd = NA)
text(5.0, -0.1, expression("Deletions"), cex= 1.25, srt = 0, xpd = NA)
text(8.0, -0.1, expression("SNM"), cex= 1.25, srt = 0, xpd = NA)
# Add y-axis label
mtext("Proportion", side = 2, outer = TRUE, cex = 1.25, line = 2, adj = 0.52)
# Add bar value
text(1.5, 0.10, expression("0.02"), cex= 0.85)
text(2.5, 0.09, expression("0.03"), cex= 0.85)
text(4.5, 0.15, expression("0.09"), cex= 0.85)
text(5.5, 0.16, expression("0.10"), cex= 0.85)
text(7.5, 0.95, expression("0.89"), cex= 0.85)
text(8.5, 0.92, expression("0.86"), cex= 0.85)
# Add legend
legend(0.75, 0.8, c("Wildtype", "Minimal"), pch = 22,
pt.bg = c("blue", "red"), pt.cex = 2, pt.lwd = 1.5,
bty = 'n', y.intersp = 1)
# Add panel label
text(0.9, 0.9, labels = "B", cex = 2)
### Make panel C ###
barplot(ma.snm$prop, col = c("blue", "red", "blue", "red", "blue", "red",
"blue", "red", "blue", "red", "blue", "red"), ylim = c(0,1),
space = c(1,0,1,0,1,0,1,0,1,0,1,0), las =1, yaxt = "n", xaxt = "n")
box(lwd=2)
# Add axes
axis(side = 2, lwd.ticks = 2, cex.axis = 1.25, las = 1,
labels = c("0.00", "0.50", "1.00"),
at = c(0, 0.5, 1.0))
axis(side = 4, lwd.ticks = 2, cex.axis = 1.25, las = 1,
at=c(0, 0.5,1.0), labels = F)
# Add x-axis labels
text(2, -0.075, expression("A:T → C:G"), cex= 1, srt = 0, xpd = NA)
text(5, -0.075, expression("A:T → G:C"), cex= 1, srt = 0, xpd = NA)
text(8, -0.075, expression("A:T → T:A"), cex= 1, srt = 0, xpd = NA)
text(11, -0.075, expression("C:G → G:C"), cex= 1, srt = 0, xpd = NA)
text(14, -0.075, expression("C:G → T:A"), cex= 1, srt = 0, xpd = NA)
text(17, -0.075, expression("C:G → A:T"), cex= 1, srt = 0, xpd = NA)
# Add y-axis label
mtext("Proportion", side = 2, outer = TRUE, cex = 1.25, line = 2, adj = 0.125)
# Add bar value
text(1.5, 0.06, expression("0.01"), cex= 0.85)
text(2.5, 0.06, expression("0.01"), cex= 0.85)
text(4.5, 0.13, expression("0.07"), cex= 0.85)
text(5.5, 0.08, expression("0.02"), cex= 0.85)
text(7.5, 0.10, expression("0.04"), cex= 0.85)
text(8.5, 0.10, expression("0.04"), cex= 0.85)
text(10.5, 0.16, expression("0.10"), cex= 0.85)
text(11.5, 0.07, expression("0.01"), cex= 0.85)
text(13.5, 0.48, expression("0.42"), cex= 0.85)
text(14.5, 0.71, expression("0.65"), cex= 0.85)
text(16.5, 0.40, expression("0.36"), cex= 0.85)
text(17.5, 0.33, expression("0.27"), cex= 0.85)
# Add legend
legend(0.55, 0.8, c("Wildtype", "Minimal"), pch = 22,
pt.bg = c("blue", "red"), pt.cex = 2, pt.lwd = 1.5,
bty = 'n', y.intersp = 1)
# Add panel label
text(0.9, 0.9, labels = "C", cex = 2)
# Close Plot Device
dev.off()
graphics.off()
# Show Plot
img <- readPNG("~/GitHub/MinimalCell/figures/Fig1.png")
grid.raster(img)
